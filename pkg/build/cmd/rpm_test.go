package main

import (
	"os"
	"path/filepath"
	"testing"

	"github.com/grafana/grafana/pkg/build/config"
	"github.com/stretchr/testify/require"
)

const pubKey = `-----BEGIN PGP PUBLIC KEY BLOCK-----

mQINBF/BNw0BEADpmpCfnLvL9bNHhqyox4w3qYukciSq1/3V2PiEYc7yt64LaXq7
5CIu/g7qpIPoeAcr9ws9wFg4/OCinJJNgPCRp8096J4d4vphZS0uTn+IoIMwYy6B
hQWxi9ZBmpy13rL0go7yuRooaxeNFgolkl7FhoI5HyTZ7nXf/bGbTVBjFb8WiCk2
2QCJlBC3hUPBgjYF2TXTxutbW6lTK+1djgHBlRNt2luiW13hw2hKeee/fl3tUplu
BJTHL6wrm3pNTjGdPsCAIaz/Eal7dSJp2SHHCmzN+eJ6/7nJyptOcycB/8qJZVKG
FB92LWyZfpNGzP9HD2idFBflnJsms7RKL2par+uD9NDYPU+rMNVvUzVTOx9cJxxM
XnBgdmTRTXxic8uVJkVG+sOPyrbYmg8xdYndvhLXWgw75lUYh8jUutLToAHNqfnd
Bpgw9lpVw9qnsqpeUY5zdIIDeFJF3RC7oqD52GbU96kj+mI5UN4sdw+5FHoUo/tI
SvMfspkVNLI9Zfz6GQUhsc1fnLEhWWy86wRpooR0JFv8QvEZySMhhaQcJTAV5HWE
Rv112okPTPpNwokzFG6GE9OjDAtPDl+tfRY9qC5xy6vSYZ67nz/gBeYokdaH6VOU
8wjpWI8mXuCYHSWRos9IdQbUx8UQSrYZA5q1qaNMtXFQdum36jblKnwczwARAQAB
tCJHcmFmYW5hIExhYnMgPGNvbnRhY3RAZ3JhZmFuYS5jb20+iQJOBBMBCAA4FiEE
zJXmLPq1ban1h42VxpPo7pFdUHMFAl/BNw0CGwMFCwkIBwIGFQoJCAsCBBYCAwEC
HgECF4AACgkQxpPo7pFdUHO01BAAkurxj0Q//Ein/rt3TbzV+aX6ecwV5PMYKM7N
l24PVZcvVYmiqi47z8rPjPKeiOtYyBlwA67FBv8HZbR6RActA8Fw54hl1u57AcgP
3nZqy2+g4IFNQkWnnSF3s5o0IPWTN1OPuEt26aIrUVRcJjupZdklnIe1kbkrbu9r
EvbQjTO3FkScUM/CmVpB//2ezvU+d9MAQ0fXpFUtP8308+khXW+7AKrdJSpskVqW
hr2jCHrLj8j6ZbHtx9EZ8DCI9RMQ0DsbbUEJ6EO/dkAESDrPbSqPqyotPhx6WtFA
OEUTHqXBJhUq8mhSXR+IRPxzCqR3d83jtIqyNS3XcGc8iBGYkp6Z0LDwEGXr4VgW
Gwn4MU+QZ95txB2jL5aazti0Q9GZ3EIWeEmdvzH/eUXqP2y98wpdmsoywcoEJwu3
pJmiE4S735+qywUYnxfWLbwbgIYdx0Vaq/NilpLtLHi4hO9k0C8eRmOosacZ93L3
hm1MNGSw9erV7MLKa3GlKJPWpcbs8nRZ3W1PplkEDi/W3djd5G64ZOhWd3wadK2R
TUQWv2FUolcYdrRTBFIXo+HJ+LZUKjGaB5f5RArgTPQMvor5SVWOieyNiE3IAu57
7VAYpxEPrNXayXAKhQWQpORVo05V2eYa+GXLCcnduPAYTF8tzBai/ZNu5dup/j1c
4969YgK5Ag0EX8E3DQEQAL8h4nvqCDEjRXtpCLHVIuVWkODNyT6dSzqJi4lCdxTb
hblFAV6nfFGl65CTESGb/kzzl0FGI612a9xc0nlcXYE+O6q7mqEpZ8j9/p/fSwB1
9MFKvXHmPawL524HDcnGCVLuhkA1Pzf2JXtsMAgudSrbuqJodJL07ytuflkQyWaS
+jCgR7W46pGfMMEzlA60A11pllzmnd7kC/b1ulxoknbGqHgWIUP5bOZmrshuxTPJ
OUfb3mzf9thg73+rsFm5gx11veID+wcBqVemyI1eVaUMdRaAWw3F9si6KCHOzvLf
7ZoSKEcPMb2GmnliC/KBDN4IK3axeHTzi/3ksOT2PU5nHC9s8bKMx6gJjHUA1bVw
ypYX82LxPVrtBcRp1Rl9sfnfR2CbR2e0mEiIhJrTeJe7dEuFW0CXLZcqbA+b2U0G
SM+TtI4drsIzoCN7Xaq/HdsAUvlqSBctYYuYSnZTPKYncAsqOke4xwFSjpsmWK4X
4oCMWxBITa6Ebbst5T3BVAhxzAJF+vdc37dWTMy79T801ILzfHvbWfoKYgTNUWma
+vmCXMpGrMkw3gYc31FAV8PRaU3vEhT3JZp3PiVQX8qWGnER1HvemeaRIcI6KDHb
Gm4mVn5Iu7A0GB0xz8arGMLjXWfZhRk29vFnN2vJyREOaNHeC/BrFoO3SX9Q168D
ABEBAAGJAjYEGAEIACAWIQTMleYs+rVtqfWHjZXGk+jukV1QcwUCX8E3DQIbDAAK
CRDGk+jukV1Qc7fbD/4oufFCzq59kVxBtqIYPvftRo2HJ+qHU+nx8RlzlxBL7eDX
bRleRB7gdyyM591oQ/ovjtNEeLlX15Ar9y/LfpZstWEsBKAmOQiYJFMEEyJEw4pw
pRd4jqF8y/3H8HTOc9NdzwjfCt4navrq3DxxmeUqnmm1tezsz5ByMWeNiruTq8Kk
llsYIX5IraSKjg1R6IMhK6ggyt7HnsxhnRRtau463dMkNvTD3kmWT66gsStiY4DH
qU8JBfOibTCE7M2uMpua1h97uHlBa9qTKXOmFIoQyshMnpgMwl0CUOX4v92XiIeV
wSJVDmE2H6LA5zaOzR/xSmhLNqd4S7k9YhUSK6tRuwbvPEKcAz/OxeoOjr/EWZzd
Kd0jPUnJdYMfzKEE0CGJ/ByEn1dMdmjCGnZTAavhJTj9htJdL8JUfh4gZceXJJij
jY+pF1adGcKhpBQ6AjFgnaijMzV+QRrv7iF+xM7CDWP/m8Zug09PorzZwQkdcGuK
B/7mbNqT+yXyMAdBCf3jYLUm0DZfAVL1f9tLOI/JmnLxTF/LEQdiNKjxagmkmiPw
7iKSozvBGa2gjx2AOvF9b7cQCksrZPI7LYiWDcgBh8O/XSEHnPcrvjeKcg1rgPEp
95Cn9UEwc3Fm0ykbdWMUCpBqMuO+FXVnlAs4XItWbYi1Vy/iD6ABuE9aL+2qhA==
=UBSY
-----END PGP PUBLIC KEY BLOCK-----
`

const privKey = `-----BEGIN PGP PRIVATE KEY BLOCK-----

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
=3esE
-----END PGP PRIVATE KEY BLOCK-----
`

const passPhrase = `test`

func TestSignRPMRepo(t *testing.T) {
	repoDir := t.TempDir()
	workDir := t.TempDir()
	pubKeyPath := filepath.Join(workDir, "pub.key")
	err := os.WriteFile(pubKeyPath, []byte(pubKey), 0600)
	require.NoError(t, err)
	privKeyPath := filepath.Join(workDir, "priv.key")
	err = os.WriteFile(privKeyPath, []byte(privKey), 0600)
	require.NoError(t, err)
	passPhrasePath := filepath.Join(workDir, "passphrase")
	err = os.WriteFile(passPhrasePath, []byte(passPhrase), 0600)
	require.NoError(t, err)
	err = os.Mkdir(filepath.Join(repoDir, "repodata"), 0700)
	require.NoError(t, err)
	err = os.WriteFile(filepath.Join(repoDir, "repodata", "repomd.xml"), []byte("<xml></xml>"), 0600)
	require.NoError(t, err)

	cfg := PublishConfig{
		Config: config.Config{
			GPGPrivateKey: privKeyPath,
			GPGPublicKey:  pubKeyPath,
			GPGPassPath:   passPhrasePath,
		},
	}

	err = signRPMRepo(repoDir, cfg)
	require.NoError(t, err)
}
