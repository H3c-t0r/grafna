// Code generated - EDITING IS FUTILE. DO NOT EDIT.
//
// Generated by:
//     kinds/gen.go
// Using jennies:
//     CoreRegistryJenny
//
// Run 'make gen-cue' from repository root to regenerate.

package schemas

import (
    "os"
    
    "cuelang.org/go/cue"
    "cuelang.org/go/cue/cuecontext"
)

type CoreKind struct {
    Name string
    CueFile cue.Value
}

func GetCoreKinds() ([]CoreKind, error) {
    ctx := cuecontext.New()
    kinds := make([]CoreKind, 0)
    
    accesspolicyCue, err := loadCueFile(ctx, "./kinds/accesspolicy/access_policy_kind.cue")
    if err != nil {
        return nil, err
    }
    kinds = append(kinds, CoreKind{
        Name: "accesspolicy",
        CueFile: accesspolicyCue,
    })
    
    dashboardCue, err := loadCueFile(ctx, "./kinds/dashboard/dashboard_kind.cue")
    if err != nil {
        return nil, err
    }
    kinds = append(kinds, CoreKind{
        Name: "dashboard",
        CueFile: dashboardCue,
    })
    
    librarypanelCue, err := loadCueFile(ctx, "./kinds/librarypanel/librarypanel_kind.cue")
    if err != nil {
        return nil, err
    }
    kinds = append(kinds, CoreKind{
        Name: "librarypanel",
        CueFile: librarypanelCue,
    })
    
    preferencesCue, err := loadCueFile(ctx, "./kinds/preferences/preferences_kind.cue")
    if err != nil {
        return nil, err
    }
    kinds = append(kinds, CoreKind{
        Name: "preferences",
        CueFile: preferencesCue,
    })
    
    publicdashboardCue, err := loadCueFile(ctx, "./kinds/publicdashboard/public_dashboard_kind.cue")
    if err != nil {
        return nil, err
    }
    kinds = append(kinds, CoreKind{
        Name: "publicdashboard",
        CueFile: publicdashboardCue,
    })
    
    roleCue, err := loadCueFile(ctx, "./kinds/role/role_kind.cue")
    if err != nil {
        return nil, err
    }
    kinds = append(kinds, CoreKind{
        Name: "role",
        CueFile: roleCue,
    })
    
    rolebindingCue, err := loadCueFile(ctx, "./kinds/rolebinding/role_binding_kind.cue")
    if err != nil {
        return nil, err
    }
    kinds = append(kinds, CoreKind{
        Name: "rolebinding",
        CueFile: rolebindingCue,
    })
    
    teamCue, err := loadCueFile(ctx, "./kinds/team/team_kind.cue")
    if err != nil {
        return nil, err
    }
    kinds = append(kinds, CoreKind{
        Name: "team",
        CueFile: teamCue,
    })
    
    return kinds, nil
}

func loadCueFile(ctx *cue.Context, path string) (cue.Value, error) {
    cueFile, err := os.ReadFile(path)
    if err != nil {
        return cue.Value{}, err
    }
    
    return ctx.CompileBytes(cueFile), nil
}
