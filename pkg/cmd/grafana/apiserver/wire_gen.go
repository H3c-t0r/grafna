// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package apiserver

import (
	"github.com/google/wire"
	"github.com/grafana/grafana/pkg/bus"
	"github.com/grafana/grafana/pkg/infra/db"
	"github.com/grafana/grafana/pkg/infra/localcache"
	"github.com/grafana/grafana/pkg/infra/tracing"
	"github.com/grafana/grafana/pkg/registry"
	"github.com/grafana/grafana/pkg/registry/apis/example"
	"github.com/grafana/grafana/pkg/registry/apis/playlist"
	"github.com/grafana/grafana/pkg/registry/apis/snapshots"
	"github.com/grafana/grafana/pkg/services/dashboardsnapshots"
	"github.com/grafana/grafana/pkg/services/dashboardsnapshots/database"
	"github.com/grafana/grafana/pkg/services/dashboardsnapshots/service"
	"github.com/grafana/grafana/pkg/services/playlist/playlistimpl"
	"github.com/grafana/grafana/pkg/services/secrets"
	"github.com/grafana/grafana/pkg/services/secrets/fakes"
	"github.com/grafana/grafana/pkg/services/sqlstore"
	"github.com/grafana/grafana/pkg/services/sqlstore/migrations"
	"github.com/grafana/grafana/pkg/setting"
)

// Injectors from wire.go:

func initializeExampleAPIBuilder(cfg *setting.Cfg) (*example.TestingAPIBuilder, error) {
	testingAPIBuilder := example.NewAPIService()
	return testingAPIBuilder, nil
}

func initializeSnapshotsAPIBuilder(cfg *setting.Cfg) (*snapshots.SnapshotsAPIBuilder, error) {
	cacheService := localcache.ProvideService()
	ossMigrations := migrations.ProvideOSSMigrations()
	tracingService, err := tracing.ProvideService(cfg)
	if err != nil {
		return nil, err
	}
	inProcBus := bus.ProvideBus(tracingService)
	sqlStore, err := sqlstore.ProvideService(cfg, cacheService, ossMigrations, inProcBus, tracingService)
	if err != nil {
		return nil, err
	}
	dashboardSnapshotStore := database.ProvideStore(sqlStore, cfg)
	fakeSecretsService := fakes.ProvideFakeSecretsService()
	serviceImpl := service.ProvideService(dashboardSnapshotStore, fakeSecretsService)
	snapshotsAPIBuilder := snapshots.NewAPIService(cfg, serviceImpl)
	return snapshotsAPIBuilder, nil
}

func initializePlaylistsAPIBuilder(cfg *setting.Cfg) (*playlist.PlaylistAPIBuilder, error) {
	cacheService := localcache.ProvideService()
	ossMigrations := migrations.ProvideOSSMigrations()
	tracingService, err := tracing.ProvideService(cfg)
	if err != nil {
		return nil, err
	}
	inProcBus := bus.ProvideBus(tracingService)
	sqlStore, err := sqlstore.ProvideService(cfg, cacheService, ossMigrations, inProcBus, tracingService)
	if err != nil {
		return nil, err
	}
	playlistService := playlistimpl.ProvideService(sqlStore, tracingService)
	playlistAPIBuilder := playlist.NewAPIService(playlistService, cfg)
	return playlistAPIBuilder, nil
}

// wire.go:

var dbWireSet = wire.NewSet(fakes.ProvideFakeSecretsService, wire.Bind(new(secrets.Service), new(*fakes.FakeSecretsService)), migrations.ProvideOSSMigrations, wire.Bind(new(registry.DatabaseMigrator), new(*migrations.OSSMigrations)), tracing.ProvideService, wire.Bind(new(tracing.Tracer), new(*tracing.TracingService)), bus.ProvideBus, wire.Bind(new(bus.Bus), new(*bus.InProcBus)), localcache.ProvideService, sqlstore.ProvideService, wire.Bind(new(db.DB), new(*sqlstore.SQLStore)))

var dashboardSnapshotsWireSet = wire.NewSet(wire.Bind(new(dashboardsnapshots.Store), new(*database.DashboardSnapshotStore)), database.ProvideStore, wire.Bind(new(dashboardsnapshots.Service), new(*service.ServiceImpl)), service.ProvideService)

var playlistsWireSet = wire.NewSet(playlistimpl.ProvideService)
