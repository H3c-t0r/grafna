package searchV2

import (
	"archive/tar"
	"compress/gzip"
	"errors"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
)

func compressFolder(src string, buf io.Writer) error {
	zr := gzip.NewWriter(buf)
	tw := tar.NewWriter(zr)

	fi, err := os.Stat(src)
	if err != nil {
		return err
	}
	if !fi.Mode().IsDir() {
		return fmt.Errorf("can only compress folder")
	}

	err = filepath.Walk(src, func(file string, fi os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		header, err := tar.FileInfoHeader(fi, file)
		if err != nil {
			return err
		}

		if len(file) == len(src) {
			return nil
		}

		newPath := file[len(src)+1:]
		if len(newPath) == 0 {
			return nil
		}

		header.Name = filepath.ToSlash(newPath)

		if err := tw.WriteHeader(header); err != nil {
			return err
		}

		if !fi.IsDir() {
			// It's safe to ignore gosec warning G304 since we only open files generated by
			// Bluge backup. No user input participates in a process.
			// nolint:gosec
			data, err := os.Open(file)
			if err != nil {
				return err
			}
			if _, err := io.Copy(tw, data); err != nil {
				return err
			}
		}
		return nil
	})
	if err != nil {
		return err
	}

	// Produce tar.
	if err := tw.Close(); err != nil {
		return err
	}
	// Produce gzip.
	if err := zr.Close(); err != nil {
		return err
	}
	return nil
}

// Check for path traversal and correct forward slashes.
func validRelPath(p string) bool {
	if p == "" || strings.Contains(p, `\`) || strings.HasPrefix(p, "/") || strings.Contains(p, "../") {
		return false
	}
	return true
}

func decompressToFolder(src io.Reader, dst string) error {
	zr, err := gzip.NewReader(src)
	if err != nil {
		return err
	}
	tr := tar.NewReader(zr)

	// Decompress each element.
	for {
		header, err := tr.Next()
		if errors.Is(err, io.EOF) {
			break // End of archive
		}
		if err != nil {
			return err
		}
		target := header.Name

		if !validRelPath(header.Name) {
			return fmt.Errorf("tar contained invalid header name: %s", target)
		}

		// It's safe to ignore gosec warning G305 since we only traverse over files generated by
		// Bluge backup process. No user input participates in a process.
		// nolint:gosec
		target = filepath.Join(dst, header.Name)

		switch header.Typeflag {
		case tar.TypeDir:
			// If it's a dir, and it doesn't exist â€“ create it.
			if _, err := os.Stat(target); err != nil {
				if err := os.MkdirAll(target, 0700); err != nil {
					return err
				}
			}
		case tar.TypeReg:
			// If it's a file create it (with same permission).
			// It's safe to ignore gosec warning G304 since we only open files generated by
			// Bluge backup. No user input participates in a process.
			// nolint:gosec
			fileToWrite, err := os.OpenFile(target, os.O_CREATE|os.O_RDWR, os.FileMode(header.Mode))
			if err != nil {
				return err
			}
			if _, err := io.Copy(fileToWrite, tr); err != nil {
				_ = fileToWrite.Close()
				return err
			}
			_ = fileToWrite.Close()
		}
	}
	return nil
}
