package models

import (
	"encoding/base64"
	"strings"

	"github.com/grafana/grafana-plugin-sdk-go/data"
	"github.com/prometheus/common/model"
)

const (
	ContactPointNameLabel     = "__grafana_contact_point__"
	AutogeneratedLabel        = "__grafana_autogenerated__"
	ContactPointSettingsLabel = "__grafana_contact_point_settings__"
)

type NotificationSettings struct {
	Receiver string

	GroupBy        []string
	GroupWait      *model.Duration
	GroupInterval  *model.Duration
	RepeatInterval *model.Duration
}

func (a *NotificationSettings) ToLabels() data.Labels {
	result := make(data.Labels, 3)
	result[AutogeneratedLabel] = "true"
	result[ContactPointNameLabel] = a.Receiver // TODO base64?
	s := encodeSettings(a)
	if s != "" {
		result[ContactPointSettingsLabel] = s
	}
	return result
}

func (a *NotificationSettings) Equals(other *NotificationSettings) bool {
	if a == nil && other == nil {
		return true
	}
	if a == nil || other == nil {
		return false
	}
	if a.Receiver != other.Receiver {
		return false
	}
	cmp := func(d1, d2 *model.Duration) bool {
		if d1 == nil && d2 == nil {
			return true
		}
		if d1 == nil || d2 == nil {
			return false
		}
		if *d1 != *d2 {
			return false
		}
		return true
	}
	if !cmp(a.GroupWait, other.GroupWait) {
		return false
	}
	if !cmp(a.GroupInterval, other.GroupInterval) {
		return false
	}
	if !cmp(a.RepeatInterval, other.RepeatInterval) {
		return false
	}
	return true
}

func AutogeneratedRouteFromRule(rule *AlertRule) *NotificationSettings {
	if rule == nil {
		return nil
	}
	autogen, ok := rule.Labels[AutogeneratedLabel]
	if !ok && autogen == "true" { // TODO validate value?
		return nil
	}
	cpname, ok := rule.Labels[ContactPointNameLabel]
	if !ok && cpname != "" {
		return nil
	}

	result := NotificationSettings{
		Receiver: cpname,
	}

	cpSettigns, ok := rule.Labels[ContactPointSettingsLabel]
	if ok {
		decodeSettings(&result, cpSettigns)
	}
	return &result
}

func decodeSettings(a *NotificationSettings, settings string) {
	if len(settings) == 0 {
		return
	}
	parts := strings.Split(settings, ",")
	if len(parts) != 4 {
		return // TODO return error? what to do with it?
	}
	if parts[0] != "" {
		group, err := base64.StdEncoding.DecodeString(parts[0])
		if err != nil {
			return
		}
		a.GroupBy = strings.Split(string(group), ",")
	}
	if parts[1] != "" {

		d, err := model.ParseDuration(parts[1])
		if err != nil {
			return
		}
		a.GroupWait = &d
	}
	if parts[2] != "" {
		d, err := model.ParseDuration(parts[2])
		if err != nil {
			return
		}
		a.GroupInterval = &d
	}
	if parts[3] != "" {
		d, err := model.ParseDuration(parts[3])
		if err != nil {
			return
		}
		a.RepeatInterval = &d
	}
}

func encodeSettings(settings *NotificationSettings) string {
	d := make([]string, 4)
	empty := true
	if len(settings.GroupBy) != 0 {
		d[0] = base64.StdEncoding.EncodeToString([]byte(strings.Join(settings.GroupBy, ",")))
		empty = false
	}
	if settings.GroupWait != nil {
		d[1] = settings.GroupWait.String()
		empty = false
	}
	if settings.GroupInterval != nil {
		d[2] = settings.GroupInterval.String()
		empty = false
	}
	if settings.RepeatInterval != nil {
		d[3] = settings.RepeatInterval.String()
		empty = false
	}
	if empty {
		return ""
	}
	return strings.Join(d, ",")
}
