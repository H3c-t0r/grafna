/*Package api contains mock API implementation of unified alerting
 *
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 *
 * Need to remove unused imports.
 */
package api

import (
	"encoding/json"
	"net/http"
	"time"

	apimodels "github.com/grafana/alerting-api/pkg/api"
	"github.com/grafana/grafana/pkg/api/response"
	"github.com/grafana/grafana/pkg/infra/log"
	"github.com/grafana/grafana/pkg/models"
	ngmodels "github.com/grafana/grafana/pkg/services/ngalert/models"
)

type RulerApiMock struct {
	log log.Logger
}

func (mock RulerApiMock) RouteDeleteNamespaceRulesConfig(c *models.ReqContext) response.Response {
	datasourceId := c.Params(":DatasourceId")
	mock.log.Info("RouteDeleteNamespaceRulesConfig: ", "DatasourceId", datasourceId)
	namespace := c.Params(":Namespace")
	mock.log.Info("RouteDeleteNamespaceRulesConfig: ", "Namespace", namespace)
	return response.Error(http.StatusNotImplemented, "", nil)
}

func (mock RulerApiMock) RouteDeleteRuleGroupConfig(c *models.ReqContext) response.Response {
	datasourceId := c.Params(":DatasourceId")
	mock.log.Info("RouteDeleteRuleGroupConfig: ", "DatasourceId", datasourceId)
	namespace := c.Params(":Namespace")
	mock.log.Info("RouteDeleteRuleGroupConfig: ", "Namespace", namespace)
	groupname := c.Params(":Groupname")
	mock.log.Info("RouteDeleteRuleGroupConfig: ", "Groupname", groupname)
	return response.Error(http.StatusNotImplemented, "", nil)
}

func (mock RulerApiMock) RouteGetNamespaceRulesConfig(c *models.ReqContext) response.Response {
	datasourceId := c.Params(":DatasourceId")
	mock.log.Info("RouteGetNamespaceRulesConfig: ", "DatasourceId", datasourceId)
	namespace := c.Params(":Namespace")
	mock.log.Info("RouteGetNamespaceRulesConfig: ", "Namespace", namespace)

	return response.Error(http.StatusNotImplemented, "", nil)
}

func (mock RulerApiMock) RouteGetRulegGroupConfig(c *models.ReqContext) response.Response {
	datasourceId := c.Params(":DatasourceId")
	mock.log.Info("RouteGetRulegGroupConfig: ", "DatasourceId", datasourceId)
	namespace := c.Params(":Namespace")
	mock.log.Info("RouteGetRulegGroupConfig: ", "Namespace", namespace)
	groupname := c.Params(":Groupname")
	mock.log.Info("RouteGetRulegGroupConfig: ", "Groupname", groupname)
	result := apimodels.RuleGroupConfigResponse{
		RuleGroupConfig: apimodels.RuleGroupConfig{
			Name:     groupname,
			Interval: 60,
			Rules: []apimodels.ExtendedRuleNode{
				{
					GrafanaManagedAlert: apimodels.ExtendedUpsertAlertDefinitionCommand{
						NoDataState:         apimodels.NoData,
						ExecutionErrorState: apimodels.AlertingErrState,
						UpdateAlertDefinitionCommand: ngmodels.UpdateAlertDefinitionCommand{
							UID:       "UID",
							OrgID:     1,
							Title:     "something completely different",
							Condition: "A",
							Data: []ngmodels.AlertQuery{
								{
									Model: json.RawMessage(`{
										"datasource": "__expr__",
										"type":"math",
										"expression":"2 + 2 > 1"
									}`),
									RefID: "A",
									RelativeTimeRange: ngmodels.RelativeTimeRange{
										From: ngmodels.Duration(time.Duration(5) * time.Hour),
										To:   ngmodels.Duration(time.Duration(3) * time.Hour),
									},
								},
							},
						},
					},
				},
			},
		},
	}
	return response.JSON(200, result)
}

func (mock RulerApiMock) RouteGetRulesConfig(c *models.ReqContext) response.Response {
	datasourceId := c.Params(":DatasourceId")
	mock.log.Info("RouteGetRulesConfig: ", "DatasourceId", datasourceId)
	result := apimodels.NamespaceConfigResponse{
		"namespace1": apimodels.RuleGroupConfig{
			Name:     "group1",
			Interval: 60,
			Rules: []apimodels.ExtendedRuleNode{
				{
					GrafanaManagedAlert: apimodels.ExtendedUpsertAlertDefinitionCommand{
						NoDataState:         apimodels.NoData,
						ExecutionErrorState: apimodels.AlertingErrState,
						UpdateAlertDefinitionCommand: ngmodels.UpdateAlertDefinitionCommand{
							UID:       "UID",
							OrgID:     1,
							Title:     "something completely different",
							Condition: "A",
							Data: []ngmodels.AlertQuery{
								{
									Model: json.RawMessage(`{
											"datasource": "__expr__",
											"type":"math",
											"expression":"2 + 2 > 1"
										}`),
									RefID: "A",
									RelativeTimeRange: ngmodels.RelativeTimeRange{
										From: ngmodels.Duration(time.Duration(5) * time.Hour),
										To:   ngmodels.Duration(time.Duration(3) * time.Hour),
									},
								},
							},
						},
					},
				},
			},
		},
	}
	return response.JSON(200, result)
}

func (mock RulerApiMock) RoutePostNameRulesConfig(c *models.ReqContext, body apimodels.RuleGroupConfig) response.Response {
	datasourceId := c.Params(":DatasourceId")
	mock.log.Info("RoutePostNameRulesConfig: ", "DatasourceId", datasourceId)
	namespace := c.Params(":Namespace")
	mock.log.Info("RoutePostNameRulesConfig: ", "Namespace", namespace)
	return response.Error(http.StatusNotImplemented, "", nil)
}
