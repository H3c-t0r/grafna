package notifier

import (
	"context"
	"fmt"

	"github.com/grafana/grafana/pkg/services/ngalert/models"
)

type AutogenRuleStore interface {
	ListAlertRules(ctx context.Context, query *models.ListAlertRulesQuery) (result models.RulesGroup, err error)
}

func NewAutogeneratedRoute(orgId int64, store AutogenRuleStore) (*models.AutogeneratedRoute, error) {
	// Create autogenerated side of the policy tree.
	// TODO: Use more efficient SQL to get all notification settings.
	rules, err := store.ListAlertRules(context.Background(), &models.ListAlertRulesQuery{OrgID: orgId})
	if err != nil {
		return nil, fmt.Errorf("failed to list alert rules: %w", err)
	}

	var notificationSettings []models.NotificationSettings
	for _, rule := range rules {
		notificationSettings = append(notificationSettings, rule.NotificationSettings...)
	}

	// TODO: Should we create all of the contact points routes regardless of whether they are used?
	newAutogenRoute, err := models.NewAutogeneratedRoute(notificationSettings)
	if err != nil {
		return nil, fmt.Errorf("failed to create autogenerated route: %w", err)
	}
	return newAutogenRoute, nil
}
