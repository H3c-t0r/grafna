// Code generated - EDITING IS FUTILE. DO NOT EDIT.
//
// Generated by:
//     public/app/plugins/gen.go
// Using jennies:
//     PluginGoTypesJenny
//
// Run 'make gen-cue' from repository root to regenerate.

package dataquery

// Defines values for NodesQueryType.
const (
	NodesQueryTypeRandom NodesQueryType = "random"

	NodesQueryTypeRandomEdges NodesQueryType = "random edges"

	NodesQueryTypeResponse NodesQueryType = "response"
)

// Defines values for StreamingQueryType.
const (
	StreamingQueryTypeFetch StreamingQueryType = "fetch"

	StreamingQueryTypeLogs StreamingQueryType = "logs"

	StreamingQueryTypeSignal StreamingQueryType = "signal"
)

// Defines values for ErrorType.
const (
	ErrorTypeFrontendException ErrorType = "frontend_exception"

	ErrorTypeFrontendObservable ErrorType = "frontend_observable"

	ErrorTypeServerPanic ErrorType = "server_panic"
)

// Defines values for NodesType.
const (
	NodesTypeRandom NodesType = "random"

	NodesTypeRandomEdges NodesType = "random edges"

	NodesTypeResponse NodesType = "response"
)

// Defines values for StreamType.
const (
	StreamTypeFetch StreamType = "fetch"

	StreamTypeLogs StreamType = "logs"

	StreamTypeSignal StreamType = "signal"
)

// CSVWave defines model for CSVWave.
type CSVWave struct {
	Labels    *string `json:"labels,omitempty"`
	Name      *string `json:"name,omitempty"`
	TimeStep  *int64  `json:"timeStep,omitempty"`
	ValuesCSV *string `json:"valuesCSV,omitempty"`
}

// NodesQuery defines model for NodesQuery.
type NodesQuery struct {
	Count *int64          `json:"count,omitempty"`
	Type  *NodesQueryType `json:"type,omitempty"`
}

// NodesQueryType defines model for NodesQuery.Type.
type NodesQueryType string

// PulseWaveQuery defines model for PulseWaveQuery.
type PulseWaveQuery struct {
	OffCount *int64   `json:"offCount,omitempty"`
	OffValue *float64 `json:"offValue,omitempty"`
	OnCount  *int64   `json:"onCount,omitempty"`
	OnValue  *float64 `json:"onValue,omitempty"`
	TimeStep *int64   `json:"timeStep,omitempty"`
}

// TODO: Should this live here given it's not used in the dataquery?
type Scenario struct {
	Description    *string `json:"description,omitempty"`
	HideAliasField *bool   `json:"hideAliasField,omitempty"`
	Id             string  `json:"id"`
	Name           string  `json:"name"`
	StringInput    string  `json:"stringInput"`
}

// SimulationQuery defines model for SimulationQuery.
type SimulationQuery struct {
	Config map[string]interface{} `json:"config,omitempty"`
	Key    struct {
		Tick float64 `json:"tick"`
		Type string  `json:"type"`
		Uid  *string `json:"uid,omitempty"`
	} `json:"key"`
	Last   *bool `json:"last,omitempty"`
	Stream *bool `json:"stream,omitempty"`
}

// StreamingQuery defines model for StreamingQuery.
type StreamingQuery struct {
	Bands  *int32             `json:"bands,omitempty"`
	Noise  int32              `json:"noise"`
	Speed  int32              `json:"speed"`
	Spread int32              `json:"spread"`
	Type   StreamingQueryType `json:"type"`
	Url    *string            `json:"url,omitempty"`
}

// StreamingQueryType defines model for StreamingQuery.Type.
type StreamingQueryType string

// TestDataDataQuery defines model for TestDataDataQuery.
type TestDataDataQuery struct {
	Alias       *string `json:"alias,omitempty"`
	Channel     *string `json:"channel,omitempty"`
	CsvContent  *string `json:"csvContent,omitempty"`
	CsvFileName *string `json:"csvFileName,omitempty"`
	CsvWave     *[]struct {
		Labels    *string `json:"labels,omitempty"`
		Name      *string `json:"name,omitempty"`
		TimeStep  *int64  `json:"timeStep,omitempty"`
		ValuesCSV *string `json:"valuesCSV,omitempty"`
	} `json:"csvWave,omitempty"`

	// For mixed data sources the selected datasource is on the query level.
	// For non mixed scenarios this is undefined.
	// TODO find a better way to do this ^ that's friendly to schema
	// TODO this shouldn't be unknown but DataSourceRef | null
	Datasource *interface{} `json:"datasource,omitempty"`
	ErrorType  *ErrorType   `json:"errorType,omitempty"`

	// true if query is disabled (ie should not be returned to the dashboard)
	Hide *bool `json:"hide,omitempty"`

	// Unique, guid like, string used in explore mode
	Key         *string `json:"key,omitempty"`
	Labels      *string `json:"labels,omitempty"`
	LevelColumn *bool   `json:"levelColumn,omitempty"`
	Lines       *int64  `json:"lines,omitempty"`
	Nodes       *struct {
		Count *int64     `json:"count,omitempty"`
		Type  *NodesType `json:"type,omitempty"`
	} `json:"nodes,omitempty"`
	PulseWave *struct {
		OffCount *int64   `json:"offCount,omitempty"`
		OffValue *float64 `json:"offValue,omitempty"`
		OnCount  *int64   `json:"onCount,omitempty"`
		OnValue  *float64 `json:"onValue,omitempty"`
		TimeStep *int64   `json:"timeStep,omitempty"`
	} `json:"pulseWave,omitempty"`

	// Specify the query flavor
	// TODO make this required and give it a default
	QueryType       *string `json:"queryType,omitempty"`
	RawFrameContent *string `json:"rawFrameContent,omitempty"`

	// A - Z
	RefId       string  `json:"refId"`
	ScenarioId  *string `json:"scenarioId,omitempty"`
	SeriesCount *int32  `json:"seriesCount,omitempty"`
	Sim         *struct {
		Config map[string]interface{} `json:"config,omitempty"`
		Key    struct {
			Tick float64 `json:"tick"`
			Type string  `json:"type"`
			Uid  *string `json:"uid,omitempty"`
		} `json:"key"`
		Last   *bool `json:"last,omitempty"`
		Stream *bool `json:"stream,omitempty"`
	} `json:"sim,omitempty"`
	SpanCount *int32 `json:"spanCount,omitempty"`
	Stream    *struct {
		Bands  *int32     `json:"bands,omitempty"`
		Noise  int32      `json:"noise"`
		Speed  int32      `json:"speed"`
		Spread int32      `json:"spread"`
		Type   StreamType `json:"type"`
		Url    *string    `json:"url,omitempty"`
	} `json:"stream,omitempty"`
	StringInput *string `json:"stringInput,omitempty"`
	Usa         *struct {
		Fields *[]string `json:"fields,omitempty"`
		Mode   *string   `json:"mode,omitempty"`
		Period *string   `json:"period,omitempty"`
		States *[]string `json:"states,omitempty"`
	} `json:"usa,omitempty"`
}

// ErrorType defines model for TestDataDataQuery.ErrorType.
type ErrorType string

// NodesType defines model for TestDataDataQuery.Nodes.Type.
type NodesType string

// StreamType defines model for TestDataDataQuery.Stream.Type.
type StreamType string

// USAQuery defines model for USAQuery.
type USAQuery struct {
	Fields *[]string `json:"fields,omitempty"`
	Mode   *string   `json:"mode,omitempty"`
	Period *string   `json:"period,omitempty"`
	States *[]string `json:"states,omitempty"`
}
