// Code generated by go-swagger; DO NOT EDIT.

package permissions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RouteGetNamespacePermissionsHandlerFunc turns a function with the right signature into a route get namespace permissions handler
type RouteGetNamespacePermissionsHandlerFunc func(RouteGetNamespacePermissionsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RouteGetNamespacePermissionsHandlerFunc) Handle(params RouteGetNamespacePermissionsParams) middleware.Responder {
	return fn(params)
}

// RouteGetNamespacePermissionsHandler interface for that can handle valid route get namespace permissions params
type RouteGetNamespacePermissionsHandler interface {
	Handle(RouteGetNamespacePermissionsParams) middleware.Responder
}

// NewRouteGetNamespacePermissions creates a new http.Handler for the route get namespace permissions operation
func NewRouteGetNamespacePermissions(ctx *middleware.Context, handler RouteGetNamespacePermissionsHandler) *RouteGetNamespacePermissions {
	return &RouteGetNamespacePermissions{Context: ctx, Handler: handler}
}

/*RouteGetNamespacePermissions swagger:route GET /api/v1/namespace/{Namespace}/permissions permissions routeGetNamespacePermissions

sets an Alerting config

*/
type RouteGetNamespacePermissions struct {
	Context *middleware.Context
	Handler RouteGetNamespacePermissionsHandler
}

func (o *RouteGetNamespacePermissions) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRouteGetNamespacePermissionsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
