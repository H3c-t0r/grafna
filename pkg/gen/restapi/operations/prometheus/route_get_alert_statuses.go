// Code generated by go-swagger; DO NOT EDIT.

package prometheus

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RouteGetAlertStatusesHandlerFunc turns a function with the right signature into a route get alert statuses handler
type RouteGetAlertStatusesHandlerFunc func(RouteGetAlertStatusesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RouteGetAlertStatusesHandlerFunc) Handle(params RouteGetAlertStatusesParams) middleware.Responder {
	return fn(params)
}

// RouteGetAlertStatusesHandler interface for that can handle valid route get alert statuses params
type RouteGetAlertStatusesHandler interface {
	Handle(RouteGetAlertStatusesParams) middleware.Responder
}

// NewRouteGetAlertStatuses creates a new http.Handler for the route get alert statuses operation
func NewRouteGetAlertStatuses(ctx *middleware.Context, handler RouteGetAlertStatusesHandler) *RouteGetAlertStatuses {
	return &RouteGetAlertStatuses{Context: ctx, Handler: handler}
}

/*RouteGetAlertStatuses swagger:route GET /prometheus/{DatasourceId}/api/v1/alerts prometheus routeGetAlertStatuses

gets the current alerts

*/
type RouteGetAlertStatuses struct {
	Context *middleware.Context
	Handler RouteGetAlertStatusesHandler
}

func (o *RouteGetAlertStatuses) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRouteGetAlertStatusesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
