// Code generated by go-swagger; DO NOT EDIT.

package testing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RouteTestReceiverConfigHandlerFunc turns a function with the right signature into a route test receiver config handler
type RouteTestReceiverConfigHandlerFunc func(RouteTestReceiverConfigParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RouteTestReceiverConfigHandlerFunc) Handle(params RouteTestReceiverConfigParams) middleware.Responder {
	return fn(params)
}

// RouteTestReceiverConfigHandler interface for that can handle valid route test receiver config params
type RouteTestReceiverConfigHandler interface {
	Handle(RouteTestReceiverConfigParams) middleware.Responder
}

// NewRouteTestReceiverConfig creates a new http.Handler for the route test receiver config operation
func NewRouteTestReceiverConfig(ctx *middleware.Context, handler RouteTestReceiverConfigHandler) *RouteTestReceiverConfig {
	return &RouteTestReceiverConfig{Context: ctx, Handler: handler}
}

/*RouteTestReceiverConfig swagger:route GET /api/v1/receiver/test testing routeTestReceiverConfig

Test receiver

*/
type RouteTestReceiverConfig struct {
	Context *middleware.Context
	Handler RouteTestReceiverConfigHandler
}

func (o *RouteTestReceiverConfig) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRouteTestReceiverConfigParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
