// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/grafana/alerting-api/pkg/gen/restapi/operations/alertmanager"
	"github.com/grafana/alerting-api/pkg/gen/restapi/operations/permissions"
	"github.com/grafana/alerting-api/pkg/gen/restapi/operations/prometheus"
	"github.com/grafana/alerting-api/pkg/gen/restapi/operations/ruler"
	"github.com/grafana/alerting-api/pkg/gen/restapi/operations/testing"
)

// NewDocumentationOfTheAPIAPI creates a new DocumentationOfTheAPI instance
func NewDocumentationOfTheAPIAPI(spec *loads.Document) *DocumentationOfTheAPIAPI {
	return &DocumentationOfTheAPIAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),
		YamlConsumer: yamlpc.YAMLConsumer(),

		JSONProducer: runtime.JSONProducer(),

		AlertmanagerRouteCreateSilenceHandler: alertmanager.RouteCreateSilenceHandlerFunc(func(params alertmanager.RouteCreateSilenceParams) middleware.Responder {
			return middleware.NotImplemented("operation alertmanager.RouteCreateSilence has not yet been implemented")
		}),
		AlertmanagerRouteDeleteAlertingConfigHandler: alertmanager.RouteDeleteAlertingConfigHandlerFunc(func(params alertmanager.RouteDeleteAlertingConfigParams) middleware.Responder {
			return middleware.NotImplemented("operation alertmanager.RouteDeleteAlertingConfig has not yet been implemented")
		}),
		RulerRouteDeleteNamespaceRulesConfigHandler: ruler.RouteDeleteNamespaceRulesConfigHandlerFunc(func(params ruler.RouteDeleteNamespaceRulesConfigParams) middleware.Responder {
			return middleware.NotImplemented("operation ruler.RouteDeleteNamespaceRulesConfig has not yet been implemented")
		}),
		RulerRouteDeleteRuleGroupConfigHandler: ruler.RouteDeleteRuleGroupConfigHandlerFunc(func(params ruler.RouteDeleteRuleGroupConfigParams) middleware.Responder {
			return middleware.NotImplemented("operation ruler.RouteDeleteRuleGroupConfig has not yet been implemented")
		}),
		AlertmanagerRouteDeleteSilenceHandler: alertmanager.RouteDeleteSilenceHandlerFunc(func(params alertmanager.RouteDeleteSilenceParams) middleware.Responder {
			return middleware.NotImplemented("operation alertmanager.RouteDeleteSilence has not yet been implemented")
		}),
		PrometheusRouteGetAlertStatusesHandler: prometheus.RouteGetAlertStatusesHandlerFunc(func(params prometheus.RouteGetAlertStatusesParams) middleware.Responder {
			return middleware.NotImplemented("operation prometheus.RouteGetAlertStatuses has not yet been implemented")
		}),
		AlertmanagerRouteGetAlertingConfigHandler: alertmanager.RouteGetAlertingConfigHandlerFunc(func(params alertmanager.RouteGetAlertingConfigParams) middleware.Responder {
			return middleware.NotImplemented("operation alertmanager.RouteGetAlertingConfig has not yet been implemented")
		}),
		AlertmanagerRouteGetAmAlertGroupsHandler: alertmanager.RouteGetAmAlertGroupsHandlerFunc(func(params alertmanager.RouteGetAmAlertGroupsParams) middleware.Responder {
			return middleware.NotImplemented("operation alertmanager.RouteGetAmAlertGroups has not yet been implemented")
		}),
		AlertmanagerRouteGetAmAlertsHandler: alertmanager.RouteGetAmAlertsHandlerFunc(func(params alertmanager.RouteGetAmAlertsParams) middleware.Responder {
			return middleware.NotImplemented("operation alertmanager.RouteGetAmAlerts has not yet been implemented")
		}),
		PermissionsRouteGetNamespacePermissionsHandler: permissions.RouteGetNamespacePermissionsHandlerFunc(func(params permissions.RouteGetNamespacePermissionsParams) middleware.Responder {
			return middleware.NotImplemented("operation permissions.RouteGetNamespacePermissions has not yet been implemented")
		}),
		RulerRouteGetNamespaceRulesConfigHandler: ruler.RouteGetNamespaceRulesConfigHandlerFunc(func(params ruler.RouteGetNamespaceRulesConfigParams) middleware.Responder {
			return middleware.NotImplemented("operation ruler.RouteGetNamespaceRulesConfig has not yet been implemented")
		}),
		PrometheusRouteGetRuleStatusesHandler: prometheus.RouteGetRuleStatusesHandlerFunc(func(params prometheus.RouteGetRuleStatusesParams) middleware.Responder {
			return middleware.NotImplemented("operation prometheus.RouteGetRuleStatuses has not yet been implemented")
		}),
		RulerRouteGetRulegGroupConfigHandler: ruler.RouteGetRulegGroupConfigHandlerFunc(func(params ruler.RouteGetRulegGroupConfigParams) middleware.Responder {
			return middleware.NotImplemented("operation ruler.RouteGetRulegGroupConfig has not yet been implemented")
		}),
		RulerRouteGetRulesConfigHandler: ruler.RouteGetRulesConfigHandlerFunc(func(params ruler.RouteGetRulesConfigParams) middleware.Responder {
			return middleware.NotImplemented("operation ruler.RouteGetRulesConfig has not yet been implemented")
		}),
		AlertmanagerRouteGetSilenceHandler: alertmanager.RouteGetSilenceHandlerFunc(func(params alertmanager.RouteGetSilenceParams) middleware.Responder {
			return middleware.NotImplemented("operation alertmanager.RouteGetSilence has not yet been implemented")
		}),
		AlertmanagerRouteGetSilencesHandler: alertmanager.RouteGetSilencesHandlerFunc(func(params alertmanager.RouteGetSilencesParams) middleware.Responder {
			return middleware.NotImplemented("operation alertmanager.RouteGetSilences has not yet been implemented")
		}),
		AlertmanagerRoutePostAlertingConfigHandler: alertmanager.RoutePostAlertingConfigHandlerFunc(func(params alertmanager.RoutePostAlertingConfigParams) middleware.Responder {
			return middleware.NotImplemented("operation alertmanager.RoutePostAlertingConfig has not yet been implemented")
		}),
		AlertmanagerRoutePostAmAlertsHandler: alertmanager.RoutePostAmAlertsHandlerFunc(func(params alertmanager.RoutePostAmAlertsParams) middleware.Responder {
			return middleware.NotImplemented("operation alertmanager.RoutePostAmAlerts has not yet been implemented")
		}),
		RulerRoutePostNameRulesConfigHandler: ruler.RoutePostNameRulesConfigHandlerFunc(func(params ruler.RoutePostNameRulesConfigParams) middleware.Responder {
			return middleware.NotImplemented("operation ruler.RoutePostNameRulesConfig has not yet been implemented")
		}),
		PermissionsRouteSetNamespacePermissionsHandler: permissions.RouteSetNamespacePermissionsHandlerFunc(func(params permissions.RouteSetNamespacePermissionsParams) middleware.Responder {
			return middleware.NotImplemented("operation permissions.RouteSetNamespacePermissions has not yet been implemented")
		}),
		TestingRouteTestReceiverConfigHandler: testing.RouteTestReceiverConfigHandlerFunc(func(params testing.RouteTestReceiverConfigParams) middleware.Responder {
			return middleware.NotImplemented("operation testing.RouteTestReceiverConfig has not yet been implemented")
		}),
		TestingRouteTestRuleConfigHandler: testing.RouteTestRuleConfigHandlerFunc(func(params testing.RouteTestRuleConfigParams) middleware.Responder {
			return middleware.NotImplemented("operation testing.RouteTestRuleConfig has not yet been implemented")
		}),
	}
}

/*DocumentationOfTheAPIAPI the documentation of the API API */
type DocumentationOfTheAPIAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer
	// YamlConsumer registers a consumer for the following mime types:
	//   - application/yaml
	YamlConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// AlertmanagerRouteCreateSilenceHandler sets the operation handler for the route create silence operation
	AlertmanagerRouteCreateSilenceHandler alertmanager.RouteCreateSilenceHandler
	// AlertmanagerRouteDeleteAlertingConfigHandler sets the operation handler for the route delete alerting config operation
	AlertmanagerRouteDeleteAlertingConfigHandler alertmanager.RouteDeleteAlertingConfigHandler
	// RulerRouteDeleteNamespaceRulesConfigHandler sets the operation handler for the route delete namespace rules config operation
	RulerRouteDeleteNamespaceRulesConfigHandler ruler.RouteDeleteNamespaceRulesConfigHandler
	// RulerRouteDeleteRuleGroupConfigHandler sets the operation handler for the route delete rule group config operation
	RulerRouteDeleteRuleGroupConfigHandler ruler.RouteDeleteRuleGroupConfigHandler
	// AlertmanagerRouteDeleteSilenceHandler sets the operation handler for the route delete silence operation
	AlertmanagerRouteDeleteSilenceHandler alertmanager.RouteDeleteSilenceHandler
	// PrometheusRouteGetAlertStatusesHandler sets the operation handler for the route get alert statuses operation
	PrometheusRouteGetAlertStatusesHandler prometheus.RouteGetAlertStatusesHandler
	// AlertmanagerRouteGetAlertingConfigHandler sets the operation handler for the route get alerting config operation
	AlertmanagerRouteGetAlertingConfigHandler alertmanager.RouteGetAlertingConfigHandler
	// AlertmanagerRouteGetAmAlertGroupsHandler sets the operation handler for the route get am alert groups operation
	AlertmanagerRouteGetAmAlertGroupsHandler alertmanager.RouteGetAmAlertGroupsHandler
	// AlertmanagerRouteGetAmAlertsHandler sets the operation handler for the route get am alerts operation
	AlertmanagerRouteGetAmAlertsHandler alertmanager.RouteGetAmAlertsHandler
	// PermissionsRouteGetNamespacePermissionsHandler sets the operation handler for the route get namespace permissions operation
	PermissionsRouteGetNamespacePermissionsHandler permissions.RouteGetNamespacePermissionsHandler
	// RulerRouteGetNamespaceRulesConfigHandler sets the operation handler for the route get namespace rules config operation
	RulerRouteGetNamespaceRulesConfigHandler ruler.RouteGetNamespaceRulesConfigHandler
	// PrometheusRouteGetRuleStatusesHandler sets the operation handler for the route get rule statuses operation
	PrometheusRouteGetRuleStatusesHandler prometheus.RouteGetRuleStatusesHandler
	// RulerRouteGetRulegGroupConfigHandler sets the operation handler for the route get ruleg group config operation
	RulerRouteGetRulegGroupConfigHandler ruler.RouteGetRulegGroupConfigHandler
	// RulerRouteGetRulesConfigHandler sets the operation handler for the route get rules config operation
	RulerRouteGetRulesConfigHandler ruler.RouteGetRulesConfigHandler
	// AlertmanagerRouteGetSilenceHandler sets the operation handler for the route get silence operation
	AlertmanagerRouteGetSilenceHandler alertmanager.RouteGetSilenceHandler
	// AlertmanagerRouteGetSilencesHandler sets the operation handler for the route get silences operation
	AlertmanagerRouteGetSilencesHandler alertmanager.RouteGetSilencesHandler
	// AlertmanagerRoutePostAlertingConfigHandler sets the operation handler for the route post alerting config operation
	AlertmanagerRoutePostAlertingConfigHandler alertmanager.RoutePostAlertingConfigHandler
	// AlertmanagerRoutePostAmAlertsHandler sets the operation handler for the route post am alerts operation
	AlertmanagerRoutePostAmAlertsHandler alertmanager.RoutePostAmAlertsHandler
	// RulerRoutePostNameRulesConfigHandler sets the operation handler for the route post name rules config operation
	RulerRoutePostNameRulesConfigHandler ruler.RoutePostNameRulesConfigHandler
	// PermissionsRouteSetNamespacePermissionsHandler sets the operation handler for the route set namespace permissions operation
	PermissionsRouteSetNamespacePermissionsHandler permissions.RouteSetNamespacePermissionsHandler
	// TestingRouteTestReceiverConfigHandler sets the operation handler for the route test receiver config operation
	TestingRouteTestReceiverConfigHandler testing.RouteTestReceiverConfigHandler
	// TestingRouteTestRuleConfigHandler sets the operation handler for the route test rule config operation
	TestingRouteTestRuleConfigHandler testing.RouteTestRuleConfigHandler
	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *DocumentationOfTheAPIAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *DocumentationOfTheAPIAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *DocumentationOfTheAPIAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *DocumentationOfTheAPIAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *DocumentationOfTheAPIAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *DocumentationOfTheAPIAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *DocumentationOfTheAPIAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *DocumentationOfTheAPIAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *DocumentationOfTheAPIAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the DocumentationOfTheAPIAPI
func (o *DocumentationOfTheAPIAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}
	if o.YamlConsumer == nil {
		unregistered = append(unregistered, "YamlConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.AlertmanagerRouteCreateSilenceHandler == nil {
		unregistered = append(unregistered, "alertmanager.RouteCreateSilenceHandler")
	}
	if o.AlertmanagerRouteDeleteAlertingConfigHandler == nil {
		unregistered = append(unregistered, "alertmanager.RouteDeleteAlertingConfigHandler")
	}
	if o.RulerRouteDeleteNamespaceRulesConfigHandler == nil {
		unregistered = append(unregistered, "ruler.RouteDeleteNamespaceRulesConfigHandler")
	}
	if o.RulerRouteDeleteRuleGroupConfigHandler == nil {
		unregistered = append(unregistered, "ruler.RouteDeleteRuleGroupConfigHandler")
	}
	if o.AlertmanagerRouteDeleteSilenceHandler == nil {
		unregistered = append(unregistered, "alertmanager.RouteDeleteSilenceHandler")
	}
	if o.PrometheusRouteGetAlertStatusesHandler == nil {
		unregistered = append(unregistered, "prometheus.RouteGetAlertStatusesHandler")
	}
	if o.AlertmanagerRouteGetAlertingConfigHandler == nil {
		unregistered = append(unregistered, "alertmanager.RouteGetAlertingConfigHandler")
	}
	if o.AlertmanagerRouteGetAmAlertGroupsHandler == nil {
		unregistered = append(unregistered, "alertmanager.RouteGetAmAlertGroupsHandler")
	}
	if o.AlertmanagerRouteGetAmAlertsHandler == nil {
		unregistered = append(unregistered, "alertmanager.RouteGetAmAlertsHandler")
	}
	if o.PermissionsRouteGetNamespacePermissionsHandler == nil {
		unregistered = append(unregistered, "permissions.RouteGetNamespacePermissionsHandler")
	}
	if o.RulerRouteGetNamespaceRulesConfigHandler == nil {
		unregistered = append(unregistered, "ruler.RouteGetNamespaceRulesConfigHandler")
	}
	if o.PrometheusRouteGetRuleStatusesHandler == nil {
		unregistered = append(unregistered, "prometheus.RouteGetRuleStatusesHandler")
	}
	if o.RulerRouteGetRulegGroupConfigHandler == nil {
		unregistered = append(unregistered, "ruler.RouteGetRulegGroupConfigHandler")
	}
	if o.RulerRouteGetRulesConfigHandler == nil {
		unregistered = append(unregistered, "ruler.RouteGetRulesConfigHandler")
	}
	if o.AlertmanagerRouteGetSilenceHandler == nil {
		unregistered = append(unregistered, "alertmanager.RouteGetSilenceHandler")
	}
	if o.AlertmanagerRouteGetSilencesHandler == nil {
		unregistered = append(unregistered, "alertmanager.RouteGetSilencesHandler")
	}
	if o.AlertmanagerRoutePostAlertingConfigHandler == nil {
		unregistered = append(unregistered, "alertmanager.RoutePostAlertingConfigHandler")
	}
	if o.AlertmanagerRoutePostAmAlertsHandler == nil {
		unregistered = append(unregistered, "alertmanager.RoutePostAmAlertsHandler")
	}
	if o.RulerRoutePostNameRulesConfigHandler == nil {
		unregistered = append(unregistered, "ruler.RoutePostNameRulesConfigHandler")
	}
	if o.PermissionsRouteSetNamespacePermissionsHandler == nil {
		unregistered = append(unregistered, "permissions.RouteSetNamespacePermissionsHandler")
	}
	if o.TestingRouteTestReceiverConfigHandler == nil {
		unregistered = append(unregistered, "testing.RouteTestReceiverConfigHandler")
	}
	if o.TestingRouteTestRuleConfigHandler == nil {
		unregistered = append(unregistered, "testing.RouteTestRuleConfigHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *DocumentationOfTheAPIAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *DocumentationOfTheAPIAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	return nil
}

// Authorizer returns the registered authorizer
func (o *DocumentationOfTheAPIAPI) Authorizer() runtime.Authorizer {
	return nil
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *DocumentationOfTheAPIAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		case "application/yaml":
			result["application/yaml"] = o.YamlConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *DocumentationOfTheAPIAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *DocumentationOfTheAPIAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the documentation of the API API
func (o *DocumentationOfTheAPIAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *DocumentationOfTheAPIAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/alertmanager/{DatasourceId}/api/v2/silences"] = alertmanager.NewRouteCreateSilence(o.context, o.AlertmanagerRouteCreateSilenceHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/alertmanager/{DatasourceId}/config/api/v1/alerts"] = alertmanager.NewRouteDeleteAlertingConfig(o.context, o.AlertmanagerRouteDeleteAlertingConfigHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/ruler/{DatasourceId}/api/v1/rules/{Namespace}"] = ruler.NewRouteDeleteNamespaceRulesConfig(o.context, o.RulerRouteDeleteNamespaceRulesConfigHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/ruler/{DatasourceId}/api/v1/rules/{Namespace}/{Groupname}"] = ruler.NewRouteDeleteRuleGroupConfig(o.context, o.RulerRouteDeleteRuleGroupConfigHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/alertmanager/{DatasourceId}/api/v2/silence/{SilenceId}"] = alertmanager.NewRouteDeleteSilence(o.context, o.AlertmanagerRouteDeleteSilenceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/prometheus/{DatasourceId}/api/v1/alerts"] = prometheus.NewRouteGetAlertStatuses(o.context, o.PrometheusRouteGetAlertStatusesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/alertmanager/{DatasourceId}/config/api/v1/alerts"] = alertmanager.NewRouteGetAlertingConfig(o.context, o.AlertmanagerRouteGetAlertingConfigHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/alertmanager/{DatasourceId}/api/v2/alerts/groups"] = alertmanager.NewRouteGetAmAlertGroups(o.context, o.AlertmanagerRouteGetAmAlertGroupsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/alertmanager/{DatasourceId}/api/v2/alerts"] = alertmanager.NewRouteGetAmAlerts(o.context, o.AlertmanagerRouteGetAmAlertsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/namespace/{Namespace}/permissions"] = permissions.NewRouteGetNamespacePermissions(o.context, o.PermissionsRouteGetNamespacePermissionsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/ruler/{DatasourceId}/api/v1/rules/{Namespace}"] = ruler.NewRouteGetNamespaceRulesConfig(o.context, o.RulerRouteGetNamespaceRulesConfigHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/prometheus/{DatasourceId}/api/v1/rules"] = prometheus.NewRouteGetRuleStatuses(o.context, o.PrometheusRouteGetRuleStatusesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/ruler/{DatasourceId}/api/v1/rules/{Namespace}/{Groupname}"] = ruler.NewRouteGetRulegGroupConfig(o.context, o.RulerRouteGetRulegGroupConfigHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/ruler/{DatasourceId}/api/v1/rules"] = ruler.NewRouteGetRulesConfig(o.context, o.RulerRouteGetRulesConfigHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/alertmanager/{DatasourceId}/api/v2/silence/{SilenceId}"] = alertmanager.NewRouteGetSilence(o.context, o.AlertmanagerRouteGetSilenceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/alertmanager/{DatasourceId}/api/v2/silences"] = alertmanager.NewRouteGetSilences(o.context, o.AlertmanagerRouteGetSilencesHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/alertmanager/{DatasourceId}/config/api/v1/alerts"] = alertmanager.NewRoutePostAlertingConfig(o.context, o.AlertmanagerRoutePostAlertingConfigHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/alertmanager/{DatasourceId}/api/v2/alerts"] = alertmanager.NewRoutePostAmAlerts(o.context, o.AlertmanagerRoutePostAmAlertsHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/ruler/{DatasourceId}/api/v1/rules/{Namespace}"] = ruler.NewRoutePostNameRulesConfig(o.context, o.RulerRoutePostNameRulesConfigHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/namespace/{Namespace}/permissions"] = permissions.NewRouteSetNamespacePermissions(o.context, o.PermissionsRouteSetNamespacePermissionsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/receiver/test"] = testing.NewRouteTestReceiverConfig(o.context, o.TestingRouteTestReceiverConfigHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/rule/test"] = testing.NewRouteTestRuleConfig(o.context, o.TestingRouteTestRuleConfigHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *DocumentationOfTheAPIAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *DocumentationOfTheAPIAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *DocumentationOfTheAPIAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *DocumentationOfTheAPIAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *DocumentationOfTheAPIAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
