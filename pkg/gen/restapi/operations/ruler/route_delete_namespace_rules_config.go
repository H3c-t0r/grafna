// Code generated by go-swagger; DO NOT EDIT.

package ruler

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RouteDeleteNamespaceRulesConfigHandlerFunc turns a function with the right signature into a route delete namespace rules config handler
type RouteDeleteNamespaceRulesConfigHandlerFunc func(RouteDeleteNamespaceRulesConfigParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RouteDeleteNamespaceRulesConfigHandlerFunc) Handle(params RouteDeleteNamespaceRulesConfigParams) middleware.Responder {
	return fn(params)
}

// RouteDeleteNamespaceRulesConfigHandler interface for that can handle valid route delete namespace rules config params
type RouteDeleteNamespaceRulesConfigHandler interface {
	Handle(RouteDeleteNamespaceRulesConfigParams) middleware.Responder
}

// NewRouteDeleteNamespaceRulesConfig creates a new http.Handler for the route delete namespace rules config operation
func NewRouteDeleteNamespaceRulesConfig(ctx *middleware.Context, handler RouteDeleteNamespaceRulesConfigHandler) *RouteDeleteNamespaceRulesConfig {
	return &RouteDeleteNamespaceRulesConfig{Context: ctx, Handler: handler}
}

/*RouteDeleteNamespaceRulesConfig swagger:route DELETE /ruler/{DatasourceId}/api/v1/rules/{Namespace} ruler routeDeleteNamespaceRulesConfig

Delete namespace

*/
type RouteDeleteNamespaceRulesConfig struct {
	Context *middleware.Context
	Handler RouteDeleteNamespaceRulesConfigHandler
}

func (o *RouteDeleteNamespaceRulesConfig) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRouteDeleteNamespaceRulesConfigParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
