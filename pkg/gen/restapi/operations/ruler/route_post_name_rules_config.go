// Code generated by go-swagger; DO NOT EDIT.

package ruler

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RoutePostNameRulesConfigHandlerFunc turns a function with the right signature into a route post name rules config handler
type RoutePostNameRulesConfigHandlerFunc func(RoutePostNameRulesConfigParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RoutePostNameRulesConfigHandlerFunc) Handle(params RoutePostNameRulesConfigParams) middleware.Responder {
	return fn(params)
}

// RoutePostNameRulesConfigHandler interface for that can handle valid route post name rules config params
type RoutePostNameRulesConfigHandler interface {
	Handle(RoutePostNameRulesConfigParams) middleware.Responder
}

// NewRoutePostNameRulesConfig creates a new http.Handler for the route post name rules config operation
func NewRoutePostNameRulesConfig(ctx *middleware.Context, handler RoutePostNameRulesConfigHandler) *RoutePostNameRulesConfig {
	return &RoutePostNameRulesConfig{Context: ctx, Handler: handler}
}

/*RoutePostNameRulesConfig swagger:route POST /ruler/{DatasourceId}/api/v1/rules/{Namespace} ruler routePostNameRulesConfig

Creates or updates a rule group

*/
type RoutePostNameRulesConfig struct {
	Context *middleware.Context
	Handler RoutePostNameRulesConfigHandler
}

func (o *RoutePostNameRulesConfig) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRoutePostNameRulesConfigParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
