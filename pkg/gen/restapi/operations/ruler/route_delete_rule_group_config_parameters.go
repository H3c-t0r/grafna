// Code generated by go-swagger; DO NOT EDIT.

package ruler

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
)

// NewRouteDeleteRuleGroupConfigParams creates a new RouteDeleteRuleGroupConfigParams object
// no default values defined in spec.
func NewRouteDeleteRuleGroupConfigParams() RouteDeleteRuleGroupConfigParams {

	return RouteDeleteRuleGroupConfigParams{}
}

// RouteDeleteRuleGroupConfigParams contains all the bound params for the route delete rule group config operation
// typically these are obtained from a http.Request
//
// swagger:parameters RouteDeleteRuleGroupConfig
type RouteDeleteRuleGroupConfigParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: path
	*/
	DatasourceID string
	/*
	  Required: true
	  In: path
	*/
	Groupname string
	/*
	  Required: true
	  In: path
	*/
	Namespace string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewRouteDeleteRuleGroupConfigParams() beforehand.
func (o *RouteDeleteRuleGroupConfigParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	rDatasourceID, rhkDatasourceID, _ := route.Params.GetOK("DatasourceId")
	if err := o.bindDatasourceID(rDatasourceID, rhkDatasourceID, route.Formats); err != nil {
		res = append(res, err)
	}

	rGroupname, rhkGroupname, _ := route.Params.GetOK("Groupname")
	if err := o.bindGroupname(rGroupname, rhkGroupname, route.Formats); err != nil {
		res = append(res, err)
	}

	rNamespace, rhkNamespace, _ := route.Params.GetOK("Namespace")
	if err := o.bindNamespace(rNamespace, rhkNamespace, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindDatasourceID binds and validates parameter DatasourceID from path.
func (o *RouteDeleteRuleGroupConfigParams) bindDatasourceID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.DatasourceID = raw

	return nil
}

// bindGroupname binds and validates parameter Groupname from path.
func (o *RouteDeleteRuleGroupConfigParams) bindGroupname(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.Groupname = raw

	return nil
}

// bindNamespace binds and validates parameter Namespace from path.
func (o *RouteDeleteRuleGroupConfigParams) bindNamespace(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.Namespace = raw

	return nil
}
