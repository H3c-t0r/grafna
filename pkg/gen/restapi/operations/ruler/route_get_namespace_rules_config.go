// Code generated by go-swagger; DO NOT EDIT.

package ruler

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RouteGetNamespaceRulesConfigHandlerFunc turns a function with the right signature into a route get namespace rules config handler
type RouteGetNamespaceRulesConfigHandlerFunc func(RouteGetNamespaceRulesConfigParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RouteGetNamespaceRulesConfigHandlerFunc) Handle(params RouteGetNamespaceRulesConfigParams) middleware.Responder {
	return fn(params)
}

// RouteGetNamespaceRulesConfigHandler interface for that can handle valid route get namespace rules config params
type RouteGetNamespaceRulesConfigHandler interface {
	Handle(RouteGetNamespaceRulesConfigParams) middleware.Responder
}

// NewRouteGetNamespaceRulesConfig creates a new http.Handler for the route get namespace rules config operation
func NewRouteGetNamespaceRulesConfig(ctx *middleware.Context, handler RouteGetNamespaceRulesConfigHandler) *RouteGetNamespaceRulesConfig {
	return &RouteGetNamespaceRulesConfig{Context: ctx, Handler: handler}
}

/*RouteGetNamespaceRulesConfig swagger:route GET /ruler/{DatasourceId}/api/v1/rules/{Namespace} ruler routeGetNamespaceRulesConfig

Get rule groups by namespace

*/
type RouteGetNamespaceRulesConfig struct {
	Context *middleware.Context
	Handler RouteGetNamespaceRulesConfigHandler
}

func (o *RouteGetNamespaceRulesConfig) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRouteGetNamespaceRulesConfigParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
