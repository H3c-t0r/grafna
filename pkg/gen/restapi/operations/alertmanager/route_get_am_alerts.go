// Code generated by go-swagger; DO NOT EDIT.

package alertmanager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RouteGetAmAlertsHandlerFunc turns a function with the right signature into a route get am alerts handler
type RouteGetAmAlertsHandlerFunc func(RouteGetAmAlertsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RouteGetAmAlertsHandlerFunc) Handle(params RouteGetAmAlertsParams) middleware.Responder {
	return fn(params)
}

// RouteGetAmAlertsHandler interface for that can handle valid route get am alerts params
type RouteGetAmAlertsHandler interface {
	Handle(RouteGetAmAlertsParams) middleware.Responder
}

// NewRouteGetAmAlerts creates a new http.Handler for the route get am alerts operation
func NewRouteGetAmAlerts(ctx *middleware.Context, handler RouteGetAmAlertsHandler) *RouteGetAmAlerts {
	return &RouteGetAmAlerts{Context: ctx, Handler: handler}
}

/*RouteGetAmAlerts swagger:route GET /alertmanager/{DatasourceId}/api/v2/alerts alertmanager routeGetAmAlerts

get alertmanager alerts

*/
type RouteGetAmAlerts struct {
	Context *middleware.Context
	Handler RouteGetAmAlertsHandler
}

func (o *RouteGetAmAlerts) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRouteGetAmAlertsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
