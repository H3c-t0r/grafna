// Code generated by go-swagger; DO NOT EDIT.

package alertmanager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RouteGetSilencesHandlerFunc turns a function with the right signature into a route get silences handler
type RouteGetSilencesHandlerFunc func(RouteGetSilencesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RouteGetSilencesHandlerFunc) Handle(params RouteGetSilencesParams) middleware.Responder {
	return fn(params)
}

// RouteGetSilencesHandler interface for that can handle valid route get silences params
type RouteGetSilencesHandler interface {
	Handle(RouteGetSilencesParams) middleware.Responder
}

// NewRouteGetSilences creates a new http.Handler for the route get silences operation
func NewRouteGetSilences(ctx *middleware.Context, handler RouteGetSilencesHandler) *RouteGetSilences {
	return &RouteGetSilences{Context: ctx, Handler: handler}
}

/*RouteGetSilences swagger:route GET /alertmanager/{DatasourceId}/api/v2/silences alertmanager routeGetSilences

get silences

*/
type RouteGetSilences struct {
	Context *middleware.Context
	Handler RouteGetSilencesHandler
}

func (o *RouteGetSilences) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRouteGetSilencesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
