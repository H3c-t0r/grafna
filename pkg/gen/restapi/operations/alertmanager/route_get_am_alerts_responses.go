// Code generated by go-swagger; DO NOT EDIT.

package alertmanager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/grafana/alerting-api/pkg/gen/models"
)

// RouteGetAmAlertsOKCode is the HTTP code returned for type RouteGetAmAlertsOK
const RouteGetAmAlertsOKCode int = 200

/*RouteGetAmAlertsOK GettableAlerts

swagger:response routeGetAmAlertsOK
*/
type RouteGetAmAlertsOK struct {

	/*
	  In: Body
	*/
	Payload models.GettableAlerts `json:"body,omitempty"`
}

// NewRouteGetAmAlertsOK creates RouteGetAmAlertsOK with default headers values
func NewRouteGetAmAlertsOK() *RouteGetAmAlertsOK {

	return &RouteGetAmAlertsOK{}
}

// WithPayload adds the payload to the route get am alerts o k response
func (o *RouteGetAmAlertsOK) WithPayload(payload models.GettableAlerts) *RouteGetAmAlertsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the route get am alerts o k response
func (o *RouteGetAmAlertsOK) SetPayload(payload models.GettableAlerts) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RouteGetAmAlertsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// RouteGetAmAlertsBadRequestCode is the HTTP code returned for type RouteGetAmAlertsBadRequest
const RouteGetAmAlertsBadRequestCode int = 400

/*RouteGetAmAlertsBadRequest ValidationError

swagger:response routeGetAmAlertsBadRequest
*/
type RouteGetAmAlertsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ValidationError `json:"body,omitempty"`
}

// NewRouteGetAmAlertsBadRequest creates RouteGetAmAlertsBadRequest with default headers values
func NewRouteGetAmAlertsBadRequest() *RouteGetAmAlertsBadRequest {

	return &RouteGetAmAlertsBadRequest{}
}

// WithPayload adds the payload to the route get am alerts bad request response
func (o *RouteGetAmAlertsBadRequest) WithPayload(payload *models.ValidationError) *RouteGetAmAlertsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the route get am alerts bad request response
func (o *RouteGetAmAlertsBadRequest) SetPayload(payload *models.ValidationError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RouteGetAmAlertsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
