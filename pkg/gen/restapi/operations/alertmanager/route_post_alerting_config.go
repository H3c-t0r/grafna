// Code generated by go-swagger; DO NOT EDIT.

package alertmanager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RoutePostAlertingConfigHandlerFunc turns a function with the right signature into a route post alerting config handler
type RoutePostAlertingConfigHandlerFunc func(RoutePostAlertingConfigParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RoutePostAlertingConfigHandlerFunc) Handle(params RoutePostAlertingConfigParams) middleware.Responder {
	return fn(params)
}

// RoutePostAlertingConfigHandler interface for that can handle valid route post alerting config params
type RoutePostAlertingConfigHandler interface {
	Handle(RoutePostAlertingConfigParams) middleware.Responder
}

// NewRoutePostAlertingConfig creates a new http.Handler for the route post alerting config operation
func NewRoutePostAlertingConfig(ctx *middleware.Context, handler RoutePostAlertingConfigHandler) *RoutePostAlertingConfig {
	return &RoutePostAlertingConfig{Context: ctx, Handler: handler}
}

/*RoutePostAlertingConfig swagger:route POST /alertmanager/{DatasourceId}/config/api/v1/alerts alertmanager routePostAlertingConfig

sets an Alerting config

*/
type RoutePostAlertingConfig struct {
	Context *middleware.Context
	Handler RoutePostAlertingConfigHandler
}

func (o *RoutePostAlertingConfig) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRoutePostAlertingConfigParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
