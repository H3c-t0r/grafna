// Code generated by go-swagger; DO NOT EDIT.

package alertmanager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/grafana/alerting-api/pkg/gen/models"
)

// RouteGetSilencesOKCode is the HTTP code returned for type RouteGetSilencesOK
const RouteGetSilencesOKCode int = 200

/*RouteGetSilencesOK GettableSilences

swagger:response routeGetSilencesOK
*/
type RouteGetSilencesOK struct {

	/*
	  In: Body
	*/
	Payload models.GettableSilences `json:"body,omitempty"`
}

// NewRouteGetSilencesOK creates RouteGetSilencesOK with default headers values
func NewRouteGetSilencesOK() *RouteGetSilencesOK {

	return &RouteGetSilencesOK{}
}

// WithPayload adds the payload to the route get silences o k response
func (o *RouteGetSilencesOK) WithPayload(payload models.GettableSilences) *RouteGetSilencesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the route get silences o k response
func (o *RouteGetSilencesOK) SetPayload(payload models.GettableSilences) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RouteGetSilencesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = models.GettableSilences{}
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// RouteGetSilencesBadRequestCode is the HTTP code returned for type RouteGetSilencesBadRequest
const RouteGetSilencesBadRequestCode int = 400

/*RouteGetSilencesBadRequest ValidationError

swagger:response routeGetSilencesBadRequest
*/
type RouteGetSilencesBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ValidationError `json:"body,omitempty"`
}

// NewRouteGetSilencesBadRequest creates RouteGetSilencesBadRequest with default headers values
func NewRouteGetSilencesBadRequest() *RouteGetSilencesBadRequest {

	return &RouteGetSilencesBadRequest{}
}

// WithPayload adds the payload to the route get silences bad request response
func (o *RouteGetSilencesBadRequest) WithPayload(payload *models.ValidationError) *RouteGetSilencesBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the route get silences bad request response
func (o *RouteGetSilencesBadRequest) SetPayload(payload *models.ValidationError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RouteGetSilencesBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
