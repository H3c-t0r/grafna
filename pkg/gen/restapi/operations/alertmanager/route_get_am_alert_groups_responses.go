// Code generated by go-swagger; DO NOT EDIT.

package alertmanager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/grafana/alerting-api/pkg/gen/models"
)

// RouteGetAmAlertGroupsOKCode is the HTTP code returned for type RouteGetAmAlertGroupsOK
const RouteGetAmAlertGroupsOKCode int = 200

/*RouteGetAmAlertGroupsOK AlertGroups

swagger:response routeGetAmAlertGroupsOK
*/
type RouteGetAmAlertGroupsOK struct {

	/*
	  In: Body
	*/
	Payload models.AlertGroups `json:"body,omitempty"`
}

// NewRouteGetAmAlertGroupsOK creates RouteGetAmAlertGroupsOK with default headers values
func NewRouteGetAmAlertGroupsOK() *RouteGetAmAlertGroupsOK {

	return &RouteGetAmAlertGroupsOK{}
}

// WithPayload adds the payload to the route get am alert groups o k response
func (o *RouteGetAmAlertGroupsOK) WithPayload(payload models.AlertGroups) *RouteGetAmAlertGroupsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the route get am alert groups o k response
func (o *RouteGetAmAlertGroupsOK) SetPayload(payload models.AlertGroups) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RouteGetAmAlertGroupsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// RouteGetAmAlertGroupsBadRequestCode is the HTTP code returned for type RouteGetAmAlertGroupsBadRequest
const RouteGetAmAlertGroupsBadRequestCode int = 400

/*RouteGetAmAlertGroupsBadRequest ValidationError

swagger:response routeGetAmAlertGroupsBadRequest
*/
type RouteGetAmAlertGroupsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ValidationError `json:"body,omitempty"`
}

// NewRouteGetAmAlertGroupsBadRequest creates RouteGetAmAlertGroupsBadRequest with default headers values
func NewRouteGetAmAlertGroupsBadRequest() *RouteGetAmAlertGroupsBadRequest {

	return &RouteGetAmAlertGroupsBadRequest{}
}

// WithPayload adds the payload to the route get am alert groups bad request response
func (o *RouteGetAmAlertGroupsBadRequest) WithPayload(payload *models.ValidationError) *RouteGetAmAlertGroupsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the route get am alert groups bad request response
func (o *RouteGetAmAlertGroupsBadRequest) SetPayload(payload *models.ValidationError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RouteGetAmAlertGroupsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
