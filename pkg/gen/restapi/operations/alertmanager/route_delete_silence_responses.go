// Code generated by go-swagger; DO NOT EDIT.

package alertmanager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/grafana/alerting-api/pkg/gen/models"
)

// RouteDeleteSilenceOKCode is the HTTP code returned for type RouteDeleteSilenceOK
const RouteDeleteSilenceOKCode int = 200

/*RouteDeleteSilenceOK Ack

swagger:response routeDeleteSilenceOK
*/
type RouteDeleteSilenceOK struct {

	/*
	  In: Body
	*/
	Payload models.Ack `json:"body,omitempty"`
}

// NewRouteDeleteSilenceOK creates RouteDeleteSilenceOK with default headers values
func NewRouteDeleteSilenceOK() *RouteDeleteSilenceOK {

	return &RouteDeleteSilenceOK{}
}

// WithPayload adds the payload to the route delete silence o k response
func (o *RouteDeleteSilenceOK) WithPayload(payload models.Ack) *RouteDeleteSilenceOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the route delete silence o k response
func (o *RouteDeleteSilenceOK) SetPayload(payload models.Ack) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RouteDeleteSilenceOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// RouteDeleteSilenceBadRequestCode is the HTTP code returned for type RouteDeleteSilenceBadRequest
const RouteDeleteSilenceBadRequestCode int = 400

/*RouteDeleteSilenceBadRequest ValidationError

swagger:response routeDeleteSilenceBadRequest
*/
type RouteDeleteSilenceBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ValidationError `json:"body,omitempty"`
}

// NewRouteDeleteSilenceBadRequest creates RouteDeleteSilenceBadRequest with default headers values
func NewRouteDeleteSilenceBadRequest() *RouteDeleteSilenceBadRequest {

	return &RouteDeleteSilenceBadRequest{}
}

// WithPayload adds the payload to the route delete silence bad request response
func (o *RouteDeleteSilenceBadRequest) WithPayload(payload *models.ValidationError) *RouteDeleteSilenceBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the route delete silence bad request response
func (o *RouteDeleteSilenceBadRequest) SetPayload(payload *models.ValidationError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RouteDeleteSilenceBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
