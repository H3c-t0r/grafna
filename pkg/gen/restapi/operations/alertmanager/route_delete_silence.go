// Code generated by go-swagger; DO NOT EDIT.

package alertmanager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RouteDeleteSilenceHandlerFunc turns a function with the right signature into a route delete silence handler
type RouteDeleteSilenceHandlerFunc func(RouteDeleteSilenceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RouteDeleteSilenceHandlerFunc) Handle(params RouteDeleteSilenceParams) middleware.Responder {
	return fn(params)
}

// RouteDeleteSilenceHandler interface for that can handle valid route delete silence params
type RouteDeleteSilenceHandler interface {
	Handle(RouteDeleteSilenceParams) middleware.Responder
}

// NewRouteDeleteSilence creates a new http.Handler for the route delete silence operation
func NewRouteDeleteSilence(ctx *middleware.Context, handler RouteDeleteSilenceHandler) *RouteDeleteSilence {
	return &RouteDeleteSilence{Context: ctx, Handler: handler}
}

/*RouteDeleteSilence swagger:route DELETE /alertmanager/{DatasourceId}/api/v2/silence/{SilenceId} alertmanager routeDeleteSilence

delete silence

*/
type RouteDeleteSilence struct {
	Context *middleware.Context
	Handler RouteDeleteSilenceHandler
}

func (o *RouteDeleteSilence) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRouteDeleteSilenceParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
