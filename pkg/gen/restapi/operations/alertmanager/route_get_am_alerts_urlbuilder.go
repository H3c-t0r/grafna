// Code generated by go-swagger; DO NOT EDIT.

package alertmanager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"
	"strings"

	"github.com/go-openapi/swag"
)

// RouteGetAmAlertsURL generates an URL for the route get am alerts operation
type RouteGetAmAlertsURL struct {
	DatasourceID string

	Active    *bool
	Inhibited *bool
	Matchers  []string
	Receivers []string
	Silenced  *bool

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *RouteGetAmAlertsURL) WithBasePath(bp string) *RouteGetAmAlertsURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *RouteGetAmAlertsURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *RouteGetAmAlertsURL) Build() (*url.URL, error) {
	var _result url.URL

	var _path = "/alertmanager/{DatasourceId}/api/v2/alerts"

	datasourceID := o.DatasourceID
	if datasourceID != "" {
		_path = strings.Replace(_path, "{DatasourceId}", datasourceID, -1)
	} else {
		return nil, errors.New("datasourceId is required on RouteGetAmAlertsURL")
	}

	_basePath := o._basePath
	if _basePath == "" {
		_basePath = "/api/v1"
	}
	_result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	var activeQ string
	if o.Active != nil {
		activeQ = swag.FormatBool(*o.Active)
	}
	if activeQ != "" {
		qs.Set("active", activeQ)
	}

	var inhibitedQ string
	if o.Inhibited != nil {
		inhibitedQ = swag.FormatBool(*o.Inhibited)
	}
	if inhibitedQ != "" {
		qs.Set("inhibited", inhibitedQ)
	}

	var matchersIR []string
	for _, matchersI := range o.Matchers {
		matchersIS := matchersI
		if matchersIS != "" {
			matchersIR = append(matchersIR, matchersIS)
		}
	}

	matchers := swag.JoinByFormat(matchersIR, "")

	if len(matchers) > 0 {
		qsv := matchers[0]
		if qsv != "" {
			qs.Set("matchers", qsv)
		}
	}

	var receiversIR []string
	for _, receiversI := range o.Receivers {
		receiversIS := receiversI
		if receiversIS != "" {
			receiversIR = append(receiversIR, receiversIS)
		}
	}

	receivers := swag.JoinByFormat(receiversIR, "")

	if len(receivers) > 0 {
		qsv := receivers[0]
		if qsv != "" {
			qs.Set("receivers", qsv)
		}
	}

	var silencedQ string
	if o.Silenced != nil {
		silencedQ = swag.FormatBool(*o.Silenced)
	}
	if silencedQ != "" {
		qs.Set("silenced", silencedQ)
	}

	_result.RawQuery = qs.Encode()

	return &_result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *RouteGetAmAlertsURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *RouteGetAmAlertsURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *RouteGetAmAlertsURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on RouteGetAmAlertsURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on RouteGetAmAlertsURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *RouteGetAmAlertsURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
