// Code generated by go-swagger; DO NOT EDIT.

package alertmanager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/grafana/alerting-api/pkg/gen/models"
)

// RoutePostAmAlertsOKCode is the HTTP code returned for type RoutePostAmAlertsOK
const RoutePostAmAlertsOKCode int = 200

/*RoutePostAmAlertsOK Ack

swagger:response routePostAmAlertsOK
*/
type RoutePostAmAlertsOK struct {

	/*
	  In: Body
	*/
	Payload models.Ack `json:"body,omitempty"`
}

// NewRoutePostAmAlertsOK creates RoutePostAmAlertsOK with default headers values
func NewRoutePostAmAlertsOK() *RoutePostAmAlertsOK {

	return &RoutePostAmAlertsOK{}
}

// WithPayload adds the payload to the route post am alerts o k response
func (o *RoutePostAmAlertsOK) WithPayload(payload models.Ack) *RoutePostAmAlertsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the route post am alerts o k response
func (o *RoutePostAmAlertsOK) SetPayload(payload models.Ack) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RoutePostAmAlertsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// RoutePostAmAlertsBadRequestCode is the HTTP code returned for type RoutePostAmAlertsBadRequest
const RoutePostAmAlertsBadRequestCode int = 400

/*RoutePostAmAlertsBadRequest ValidationError

swagger:response routePostAmAlertsBadRequest
*/
type RoutePostAmAlertsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ValidationError `json:"body,omitempty"`
}

// NewRoutePostAmAlertsBadRequest creates RoutePostAmAlertsBadRequest with default headers values
func NewRoutePostAmAlertsBadRequest() *RoutePostAmAlertsBadRequest {

	return &RoutePostAmAlertsBadRequest{}
}

// WithPayload adds the payload to the route post am alerts bad request response
func (o *RoutePostAmAlertsBadRequest) WithPayload(payload *models.ValidationError) *RoutePostAmAlertsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the route post am alerts bad request response
func (o *RoutePostAmAlertsBadRequest) SetPayload(payload *models.ValidationError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RoutePostAmAlertsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
