// Code generated by go-swagger; DO NOT EDIT.

package alertmanager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewRouteGetAmAlertGroupsParams creates a new RouteGetAmAlertGroupsParams object
// no default values defined in spec.
func NewRouteGetAmAlertGroupsParams() RouteGetAmAlertGroupsParams {

	return RouteGetAmAlertGroupsParams{}
}

// RouteGetAmAlertGroupsParams contains all the bound params for the route get am alert groups operation
// typically these are obtained from a http.Request
//
// swagger:parameters RouteGetAmAlertGroups
type RouteGetAmAlertGroupsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: path
	*/
	DatasourceID string
	/*Show active alerts
	  In: query
	*/
	Active *bool
	/*Show inhibited alerts
	  In: query
	*/
	Inhibited *bool
	/*A list of matchers to filter alerts by
	  In: query
	*/
	Matchers []string
	/*A list of receivers to filter alerts by
	  In: query
	*/
	Receivers []string
	/*Show silenced alerts
	  In: query
	*/
	Silenced *bool
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewRouteGetAmAlertGroupsParams() beforehand.
func (o *RouteGetAmAlertGroupsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	rDatasourceID, rhkDatasourceID, _ := route.Params.GetOK("DatasourceId")
	if err := o.bindDatasourceID(rDatasourceID, rhkDatasourceID, route.Formats); err != nil {
		res = append(res, err)
	}

	qActive, qhkActive, _ := qs.GetOK("active")
	if err := o.bindActive(qActive, qhkActive, route.Formats); err != nil {
		res = append(res, err)
	}

	qInhibited, qhkInhibited, _ := qs.GetOK("inhibited")
	if err := o.bindInhibited(qInhibited, qhkInhibited, route.Formats); err != nil {
		res = append(res, err)
	}

	qMatchers, qhkMatchers, _ := qs.GetOK("matchers")
	if err := o.bindMatchers(qMatchers, qhkMatchers, route.Formats); err != nil {
		res = append(res, err)
	}

	qReceivers, qhkReceivers, _ := qs.GetOK("receivers")
	if err := o.bindReceivers(qReceivers, qhkReceivers, route.Formats); err != nil {
		res = append(res, err)
	}

	qSilenced, qhkSilenced, _ := qs.GetOK("silenced")
	if err := o.bindSilenced(qSilenced, qhkSilenced, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindDatasourceID binds and validates parameter DatasourceID from path.
func (o *RouteGetAmAlertGroupsParams) bindDatasourceID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.DatasourceID = raw

	return nil
}

// bindActive binds and validates parameter Active from query.
func (o *RouteGetAmAlertGroupsParams) bindActive(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("active", "query", "bool", raw)
	}
	o.Active = &value

	return nil
}

// bindInhibited binds and validates parameter Inhibited from query.
func (o *RouteGetAmAlertGroupsParams) bindInhibited(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("inhibited", "query", "bool", raw)
	}
	o.Inhibited = &value

	return nil
}

// bindMatchers binds and validates array parameter Matchers from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *RouteGetAmAlertGroupsParams) bindMatchers(rawData []string, hasKey bool, formats strfmt.Registry) error {

	var qvMatchers string
	if len(rawData) > 0 {
		qvMatchers = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	matchersIC := swag.SplitByFormat(qvMatchers, "")
	if len(matchersIC) == 0 {
		return nil
	}

	var matchersIR []string
	for _, matchersIV := range matchersIC {
		matchersI := matchersIV

		matchersIR = append(matchersIR, matchersI)
	}

	o.Matchers = matchersIR

	return nil
}

// bindReceivers binds and validates array parameter Receivers from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *RouteGetAmAlertGroupsParams) bindReceivers(rawData []string, hasKey bool, formats strfmt.Registry) error {

	var qvReceivers string
	if len(rawData) > 0 {
		qvReceivers = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	receiversIC := swag.SplitByFormat(qvReceivers, "")
	if len(receiversIC) == 0 {
		return nil
	}

	var receiversIR []string
	for _, receiversIV := range receiversIC {
		receiversI := receiversIV

		receiversIR = append(receiversIR, receiversI)
	}

	o.Receivers = receiversIR

	return nil
}

// bindSilenced binds and validates parameter Silenced from query.
func (o *RouteGetAmAlertGroupsParams) bindSilenced(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("silenced", "query", "bool", raw)
	}
	o.Silenced = &value

	return nil
}
