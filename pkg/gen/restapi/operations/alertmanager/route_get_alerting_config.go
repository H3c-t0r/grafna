// Code generated by go-swagger; DO NOT EDIT.

package alertmanager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RouteGetAlertingConfigHandlerFunc turns a function with the right signature into a route get alerting config handler
type RouteGetAlertingConfigHandlerFunc func(RouteGetAlertingConfigParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RouteGetAlertingConfigHandlerFunc) Handle(params RouteGetAlertingConfigParams) middleware.Responder {
	return fn(params)
}

// RouteGetAlertingConfigHandler interface for that can handle valid route get alerting config params
type RouteGetAlertingConfigHandler interface {
	Handle(RouteGetAlertingConfigParams) middleware.Responder
}

// NewRouteGetAlertingConfig creates a new http.Handler for the route get alerting config operation
func NewRouteGetAlertingConfig(ctx *middleware.Context, handler RouteGetAlertingConfigHandler) *RouteGetAlertingConfig {
	return &RouteGetAlertingConfig{Context: ctx, Handler: handler}
}

/*RouteGetAlertingConfig swagger:route GET /alertmanager/{DatasourceId}/config/api/v1/alerts alertmanager routeGetAlertingConfig

gets an Alerting config

*/
type RouteGetAlertingConfig struct {
	Context *middleware.Context
	Handler RouteGetAlertingConfigHandler
}

func (o *RouteGetAlertingConfig) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRouteGetAlertingConfigParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
