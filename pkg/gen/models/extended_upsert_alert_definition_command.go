// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExtendedUpsertAlertDefinitionCommand ExtendedUpsertAlertDefinitionCommand extends UpsertAlertDefinitionCommand
// with properties of grafana dashboard alerts
//
// swagger:model ExtendedUpsertAlertDefinitionCommand
type ExtendedUpsertAlertDefinitionCommand struct {

	// Condition is the refID of the query or expression to be evaluated
	Condition string `json:"condition,omitempty"`

	// Data is an array of the queries and expressions
	Data []*AlertQuery `json:"data"`

	// execution error state
	// Enum: [Alerting KeepLastState]
	ExecutionErrorState string `json:"exec_err_state,omitempty"`

	// no data state
	// Enum: [Alerting NoData KeepLastState OK]
	NoDataState string `json:"no_data_state,omitempty"`

	// Receivers are optional and used for migrating notification channels of existing alerts
	Receivers []string `json:"receivers"`

	// settings
	Settings map[string]interface{} `json:"settings,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// UID is set only for existing definitions
	UID string `json:"uid,omitempty"`
}

// Validate validates this extended upsert alert definition command
func (m *ExtendedUpsertAlertDefinitionCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutionErrorState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNoDataState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExtendedUpsertAlertDefinitionCommand) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var extendedUpsertAlertDefinitionCommandTypeExecutionErrorStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Alerting","KeepLastState"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		extendedUpsertAlertDefinitionCommandTypeExecutionErrorStatePropEnum = append(extendedUpsertAlertDefinitionCommandTypeExecutionErrorStatePropEnum, v)
	}
}

const (

	// ExtendedUpsertAlertDefinitionCommandExecutionErrorStateAlerting captures enum value "Alerting"
	ExtendedUpsertAlertDefinitionCommandExecutionErrorStateAlerting string = "Alerting"

	// ExtendedUpsertAlertDefinitionCommandExecutionErrorStateKeepLastState captures enum value "KeepLastState"
	ExtendedUpsertAlertDefinitionCommandExecutionErrorStateKeepLastState string = "KeepLastState"
)

// prop value enum
func (m *ExtendedUpsertAlertDefinitionCommand) validateExecutionErrorStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, extendedUpsertAlertDefinitionCommandTypeExecutionErrorStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ExtendedUpsertAlertDefinitionCommand) validateExecutionErrorState(formats strfmt.Registry) error {

	if swag.IsZero(m.ExecutionErrorState) { // not required
		return nil
	}

	// value enum
	if err := m.validateExecutionErrorStateEnum("exec_err_state", "body", m.ExecutionErrorState); err != nil {
		return err
	}

	return nil
}

var extendedUpsertAlertDefinitionCommandTypeNoDataStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Alerting","NoData","KeepLastState","OK"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		extendedUpsertAlertDefinitionCommandTypeNoDataStatePropEnum = append(extendedUpsertAlertDefinitionCommandTypeNoDataStatePropEnum, v)
	}
}

const (

	// ExtendedUpsertAlertDefinitionCommandNoDataStateAlerting captures enum value "Alerting"
	ExtendedUpsertAlertDefinitionCommandNoDataStateAlerting string = "Alerting"

	// ExtendedUpsertAlertDefinitionCommandNoDataStateNoData captures enum value "NoData"
	ExtendedUpsertAlertDefinitionCommandNoDataStateNoData string = "NoData"

	// ExtendedUpsertAlertDefinitionCommandNoDataStateKeepLastState captures enum value "KeepLastState"
	ExtendedUpsertAlertDefinitionCommandNoDataStateKeepLastState string = "KeepLastState"

	// ExtendedUpsertAlertDefinitionCommandNoDataStateOK captures enum value "OK"
	ExtendedUpsertAlertDefinitionCommandNoDataStateOK string = "OK"
)

// prop value enum
func (m *ExtendedUpsertAlertDefinitionCommand) validateNoDataStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, extendedUpsertAlertDefinitionCommandTypeNoDataStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ExtendedUpsertAlertDefinitionCommand) validateNoDataState(formats strfmt.Registry) error {

	if swag.IsZero(m.NoDataState) { // not required
		return nil
	}

	// value enum
	if err := m.validateNoDataStateEnum("no_data_state", "body", m.NoDataState); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExtendedUpsertAlertDefinitionCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExtendedUpsertAlertDefinitionCommand) UnmarshalBinary(b []byte) error {
	var res ExtendedUpsertAlertDefinitionCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
