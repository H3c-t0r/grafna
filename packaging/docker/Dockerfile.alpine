ARG BASE_IMAGE=alpine:latest
FROM ${BASE_IMAGE} as copy-grafana-tarball

ARG GRAFANA_TGZ="grafana-latest.linux-x64.tar.gz"
COPY ${GRAFANA_TGZ} /tmp/grafana.tar.gz
RUN mkdir /tmp/grafana && tar xfvz /tmp/grafana.tar.gz --strip-components=1 -C /tmp/grafana

FROM debian:stretch as install-phantomjs-libs

RUN apt update && apt -y upgrade
RUN apt -y install fontconfig

ARG BASE_IMAGE=alpine:latest
FROM ${BASE_IMAGE}

# Add required packages.
RUN apk add --update --no-cache shadow ca-certificates curl bash file openssl fontconfig ttf-dejavu && \
    rm -rf /tmp/*.apk /var/cache/apk/*

# Add glibc - required by grafana-server, grafana-cli, and phantomjs.
ARG GLIBC_VER="2.28-r0"
RUN ALPINE_GLIBC_REPO="https://github.com/sgerrand/alpine-pkg-glibc/releases/download" && \
    curl -Ls https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub -o /etc/apk/keys/sgerrand.rsa.pub && \
    curl -Ls ${ALPINE_GLIBC_REPO}/${GLIBC_VER}/glibc-${GLIBC_VER}.apk > /tmp/${GLIBC_VER}.apk && \
    apk add /tmp/${GLIBC_VER}.apk && \
    curl -Ls ${ALPINE_GLIBC_REPO}/${GLIBC_VER}/glibc-bin-${GLIBC_VER}.apk > /tmp/${GLIBC_VER}-bin.apk && \
    apk add /tmp/${GLIBC_VER}-bin.apk && \
    rm -rf /tmp/*.apk /var/cache/apk/*

# Fix glibc ldd command - see https://github.com/sgerrand/alpine-pkg-glibc/issues/103.
RUN sed -i s/lib64/lib/ /usr/glibc-compat/bin/ldd

# Add required phantomjs libs.
COPY --from=install-phantomjs-libs /lib/x86_64-linux-gnu/libz.so.1 /usr/glibc-compat/lib
COPY --from=install-phantomjs-libs /usr/lib/x86_64-linux-gnu/libfontconfig.so.1 /usr/glibc-compat/lib
COPY --from=install-phantomjs-libs /usr/lib/x86_64-linux-gnu/libfreetype.so.6 /usr/glibc-compat/lib
COPY --from=install-phantomjs-libs /usr/lib/x86_64-linux-gnu/libstdc++.so.6 /usr/glibc-compat/lib
COPY --from=install-phantomjs-libs /lib/x86_64-linux-gnu/libgcc_s.so.1 /usr/glibc-compat/lib
COPY --from=install-phantomjs-libs /lib/x86_64-linux-gnu/libexpat.so.1 /usr/glibc-compat/lib
COPY --from=install-phantomjs-libs /usr/lib/x86_64-linux-gnu/libpng16.so.16 /usr/glibc-compat/lib

RUN /usr/glibc-compat/sbin/ldconfig

# Set up grafana.
ARG GF_UID="472"
ARG GF_GID="472"

ENV PATH=/usr/share/grafana/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin \
    GF_PATHS_CONFIG="/etc/grafana/grafana.ini" \
    GF_PATHS_DATA="/var/lib/grafana" \
    GF_PATHS_HOME="/usr/share/grafana" \
    GF_PATHS_LOGS="/var/log/grafana" \
    GF_PATHS_PLUGINS="/var/lib/grafana/plugins" \
    GF_PATHS_PROVISIONING="/etc/grafana/provisioning"

WORKDIR $GF_PATHS_HOME

COPY --from=0 /tmp/grafana "$GF_PATHS_HOME"

RUN mkdir -p "$GF_PATHS_HOME/.aws" && \
    groupadd -r -g $GF_GID grafana && \
    useradd -r -u $GF_UID -g grafana grafana && \
    mkdir -p "$GF_PATHS_PROVISIONING/datasources" \
             "$GF_PATHS_PROVISIONING/dashboards" \
             "$GF_PATHS_LOGS" \
             "$GF_PATHS_PLUGINS" \
             "$GF_PATHS_DATA" && \
    cp "$GF_PATHS_HOME/conf/sample.ini" "$GF_PATHS_CONFIG" && \
    cp "$GF_PATHS_HOME/conf/ldap.toml" /etc/grafana/ldap.toml && \
    chown -R grafana:grafana "$GF_PATHS_DATA" "$GF_PATHS_HOME/.aws" "$GF_PATHS_LOGS" "$GF_PATHS_PLUGINS" && \
    chmod 777 "$GF_PATHS_DATA" "$GF_PATHS_HOME/.aws" "$GF_PATHS_LOGS" "$GF_PATHS_PLUGINS"

EXPOSE 3000

COPY ./run.sh /run.sh

USER grafana
ENTRYPOINT [ "/run.sh" ]
