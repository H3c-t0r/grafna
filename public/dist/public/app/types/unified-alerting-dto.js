// Prometheus API DTOs, possibly to be autogenerated from openapi spec in the near future
export var PromAlertingRuleState;
(function (PromAlertingRuleState) {
    PromAlertingRuleState["Firing"] = "firing";
    PromAlertingRuleState["Inactive"] = "inactive";
    PromAlertingRuleState["Pending"] = "pending";
})(PromAlertingRuleState || (PromAlertingRuleState = {}));
export var GrafanaAlertState;
(function (GrafanaAlertState) {
    GrafanaAlertState["Normal"] = "Normal";
    GrafanaAlertState["Alerting"] = "Alerting";
    GrafanaAlertState["Pending"] = "Pending";
    GrafanaAlertState["NoData"] = "NoData";
    GrafanaAlertState["Error"] = "Error";
})(GrafanaAlertState || (GrafanaAlertState = {}));
export function isPromAlertingRuleState(state) {
    return Object.values(PromAlertingRuleState).includes(state);
}
export function isGrafanaAlertState(state) {
    return Object.values(GrafanaAlertState).some((promState) => promState === state);
}
/** We need this to disambiguate the union PromAlertingRuleState | GrafanaAlertStateWithReason
 */
export function isAlertStateWithReason(state) {
    return (state !== null &&
        typeof state !== 'undefined' &&
        !Object.values(PromAlertingRuleState).includes(state));
}
export function mapStateWithReasonToBaseState(state) {
    if (isAlertStateWithReason(state)) {
        const fields = state.split(' ');
        return fields[0];
    }
    else {
        return state;
    }
}
export var PromRuleType;
(function (PromRuleType) {
    PromRuleType["Alerting"] = "alerting";
    PromRuleType["Recording"] = "recording";
})(PromRuleType || (PromRuleType = {}));
export var PromApplication;
(function (PromApplication) {
    PromApplication["Cortex"] = "Cortex";
    PromApplication["Mimir"] = "Mimir";
    PromApplication["Prometheus"] = "Prometheus";
    PromApplication["Thanos"] = "Thanos";
})(PromApplication || (PromApplication = {}));
export var GrafanaAlertStateDecision;
(function (GrafanaAlertStateDecision) {
    GrafanaAlertStateDecision["Alerting"] = "Alerting";
    GrafanaAlertStateDecision["NoData"] = "NoData";
    GrafanaAlertStateDecision["KeepLastState"] = "KeepLastState";
    GrafanaAlertStateDecision["OK"] = "OK";
    GrafanaAlertStateDecision["Error"] = "Error";
})(GrafanaAlertStateDecision || (GrafanaAlertStateDecision = {}));
//# sourceMappingURL=unified-alerting-dto.js.map