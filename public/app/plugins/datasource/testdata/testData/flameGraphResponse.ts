import { DataFrameDTO, FieldType } from '@grafana/data';

export const flameGraphData: DataFrameDTO = {
  name: 'response',
  // @ts-ignore
  meta: { preferredVisualisationType: 'flamegraph' },
  fields: [
    {
      name: 'level',
      values: [
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 11, 12, 13, 14, 15, 16, 10, 11, 12, 13, 9, 10, 9, 9, 7, 7, 6, 5, 6, 7,
        8, 8, 9, 10, 11, 12, 13, 8, 9, 10, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 4, 5, 6, 7, 8, 9, 9, 10, 11, 12, 11, 12,
        13, 8, 8, 7, 8, 8, 7, 6, 7, 8, 9, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 9, 8, 8, 7, 8, 6, 7, 8, 8, 7, 6, 7, 8,
        8, 8, 9, 10, 11, 12, 4, 5, 6, 7, 8, 9, 9, 10, 11, 9, 10, 7, 4, 5, 6, 7, 8, 8, 7, 8, 9, 10, 11, 12, 13, 10, 10,
        11, 9, 10, 10, 11, 12, 13, 14, 15, 16, 17, 8, 9, 5, 6, 7, 6, 7, 6, 5, 6, 6, 6, 6, 5, 6, 7, 6, 5, 6, 7, 8, 4, 5,
        6, 5, 6, 5, 4, 5, 5, 3, 4, 5, 6, 7, 7, 8, 7, 8, 9, 8, 9, 8, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
        14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 24, 24, 25, 26, 24, 25, 22, 23, 23, 24, 25, 26, 27, 28, 29, 30, 31,
        32, 21, 22, 23, 24, 25, 26, 27, 26, 24, 25, 26, 25, 24, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 25, 26,
        27, 25, 26, 24, 23, 24, 24, 25, 23, 23, 22, 23, 24, 24, 23, 24, 25, 26, 24, 25, 23, 24, 24, 25, 23, 23, 24, 24,
        23, 23, 23, 23, 23, 24, 25, 22, 23, 24, 25, 22, 23, 24, 25, 26, 27, 28, 25, 26, 27, 28, 29, 24, 22, 23, 24, 25,
        26, 27, 28, 29, 30, 31, 32, 33, 21, 22, 23, 23, 24, 24, 24, 22, 23, 24, 25, 24, 23, 24, 24, 23, 22, 23, 24, 25,
        25, 26, 27, 24, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 24, 21, 22, 23, 24, 25, 26, 27, 28, 21, 22, 19, 20,
        21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 24, 25, 26, 27, 28, 23, 24, 25, 26, 27, 28, 19, 20,
        21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
        31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 31, 30, 28, 29, 30, 31, 32, 33, 34,
        35, 36, 37, 29, 30, 31, 26, 27, 28, 28, 28, 29, 27, 26, 27, 26, 25, 26, 27, 28, 29, 30, 31, 32, 32, 33, 34, 30,
        31, 32, 33, 34, 33, 34, 35, 36, 37, 38, 39, 29, 30, 31, 32, 32, 27, 28, 28, 27, 28, 29, 30, 31, 32, 33, 34, 35,
        36, 37, 38, 39, 40, 27, 28, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 28, 27, 28, 28, 29, 27, 27, 28, 27, 27, 26,
        27, 28, 28, 29, 29, 29, 26, 27, 27, 28, 29, 30, 29, 30, 30, 29, 30, 31, 28, 29, 30, 28, 28, 28, 28, 29, 30, 29,
        30, 27, 28, 28, 26, 27, 26, 27, 27, 28, 29, 26, 27, 28, 29, 28, 27, 28, 29, 30, 30, 28, 29, 30, 31, 32, 32, 27,
        28, 26, 25, 25, 26, 27, 28, 29, 30, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
        48, 31, 30, 31, 32, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 29, 26, 27, 28,
        29, 30, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 31, 30, 29, 29, 29, 25, 26, 27, 28, 26,
        26, 27, 28, 27, 28, 28, 26, 27, 28, 28, 27, 28, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 25, 25, 26, 27, 28, 25,
        26, 24, 25, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 33, 34, 34, 32, 33, 34, 34, 32, 28, 29, 30, 31, 27,
        28, 29, 26, 27, 28, 29, 30, 31, 32, 33, 34, 26, 27, 28, 29, 24, 25, 26, 27, 28, 29, 30, 27, 28, 26, 27, 25, 26,
        27, 28, 29, 26, 25, 26, 27, 26, 27, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 38, 39, 30, 31, 32, 26, 27,
        28, 27, 28, 29, 25, 26, 27, 28, 29, 30, 31, 32, 28, 29, 28, 29, 28, 29, 27, 28, 29, 30, 31, 29, 30, 31, 32, 33,
        34, 35, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 28, 29, 30, 31, 28, 29, 30, 31, 26, 25, 26, 27, 28, 29,
        27, 28, 29, 30, 25, 26, 15, 14, 15, 16, 17, 13, 14, 15, 16, 15, 16, 17, 18, 19, 20, 12, 13, 14, 15, 16, 17, 10,
        11, 12, 13, 14, 12, 13, 10, 11, 12, 13, 14, 15, 2, 3, 4, 5, 6, 7, 8, 4, 5, 6, 7, 8, 9, 2, 3, 1, 2, 3, 4, 5, 6,
        6, 6, 6, 7, 8, 8, 9, 6, 7, 6, 6, 6, 6, 5, 5, 6, 5, 5, 5, 5, 5, 6, 7, 4, 2, 3, 4, 5, 6, 4, 5, 6, 7, 8, 9, 1, 2,
        3, 4, 5, 6, 7, 8, 2, 3, 4, 5, 6, 7, 8, 9, 2, 3, 4, 5, 6, 1, 2, 3, 3, 4, 3, 2, 1, 2, 3, 4, 5, 6, 5, 6, 7, 8, 5,
        5, 6, 7, 4, 5, 6, 4, 2, 3, 4, 3, 4, 5, 6, 5, 5, 6, 4, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
        2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
        23, 16, 17, 18, 19, 16, 17, 18, 19, 20, 21, 22, 23, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
        23, 8, 9, 10, 11, 12, 13, 14, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4,
      ],
    },
    {
      name: 'value',
      values: [
        16460000000, 4100000000, 4100000000, 3670000000, 1130000000, 1060000000, 1020000000, 150000000, 150000000,
        50000000, 30000000, 20000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,
        10000000, 10000000, 10000000, 80000000, 40000000, 10000000, 10000000, 530000000, 80000000, 40000000, 70000000,
        50000000, 50000000, 30000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,
        10000000, 20000000, 20000000, 20000000, 20000000, 20000000, 20000000, 20000000, 20000000, 20000000, 10000000,
        390000000, 390000000, 180000000, 70000000, 50000000, 10000000, 20000000, 20000000, 10000000, 10000000, 10000000,
        10000000, 10000000, 10000000, 10000000, 20000000, 10000000, 10000000, 10000000, 110000000, 80000000, 60000000,
        10000000, 20000000, 20000000, 20000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,
        20000000, 10000000, 10000000, 30000000, 20000000, 40000000, 30000000, 20000000, 10000000, 10000000, 40000000,
        40000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 210000000, 210000000, 210000000,
        130000000, 130000000, 10000000, 50000000, 40000000, 40000000, 70000000, 10000000, 40000000, 1840000000,
        240000000, 240000000, 50000000, 10000000, 10000000, 190000000, 130000000, 50000000, 20000000, 10000000,
        10000000, 10000000, 10000000, 10000000, 10000000, 80000000, 20000000, 10000000, 10000000, 10000000, 10000000,
        10000000, 10000000, 10000000, 10000000, 60000000, 10000000, 1330000000, 1290000000, 320000000, 10000000,
        10000000, 10000000, 130000000, 10000000, 10000000, 60000000, 30000000, 100000000, 40000000, 10000000, 10000000,
        40000000, 30000000, 10000000, 10000000, 70000000, 10000000, 10000000, 50000000, 40000000, 10000000, 30000000,
        20000000, 10000000, 430000000, 430000000, 430000000, 430000000, 10000000, 40000000, 20000000, 370000000,
        20000000, 10000000, 180000000, 10000000, 30000000, 10000000, 10000000, 10000000, 5630000000, 5580000000,
        5580000000, 5580000000, 5580000000, 5580000000, 5580000000, 5580000000, 5580000000, 5540000000, 5540000000,
        5530000000, 5510000000, 5500000000, 5490000000, 5490000000, 1610000000, 1610000000, 1540000000, 1540000000,
        190000000, 170000000, 170000000, 10000000, 20000000, 120000000, 10000000, 10000000, 20000000, 20000000,
        20000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,
        10000000, 850000000, 350000000, 300000000, 120000000, 110000000, 80000000, 20000000, 10000000, 80000000,
        40000000, 20000000, 10000000, 10000000, 50000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,
        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 20000000, 20000000, 20000000,
        20000000, 10000000, 10000000, 10000000, 10000000, 10000000, 370000000, 40000000, 20000000, 10000000, 100000000,
        10000000, 10000000, 10000000, 30000000, 30000000, 80000000, 20000000, 10000000, 10000000, 10000000, 40000000,
        10000000, 10000000, 10000000, 20000000, 10000000, 20000000, 10000000, 10000000, 10000000, 10000000, 10000000,
        10000000, 10000000, 110000000, 110000000, 60000000, 20000000, 20000000, 10000000, 10000000, 10000000, 10000000,
        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,
        10000000, 10000000, 10000000, 10000000, 10000000, 480000000, 150000000, 10000000, 130000000, 10000000, 10000000,
        50000000, 140000000, 80000000, 40000000, 10000000, 10000000, 20000000, 10000000, 10000000, 20000000, 120000000,
        60000000, 40000000, 10000000, 10000000, 10000000, 10000000, 20000000, 30000000, 30000000, 20000000, 20000000,
        20000000, 20000000, 20000000, 20000000, 20000000, 20000000, 20000000, 10000000, 10000000, 10000000, 10000000,
        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 60000000, 60000000, 60000000, 60000000,
        30000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,
        10000000, 10000000, 20000000, 20000000, 20000000, 20000000, 20000000, 30000000, 30000000, 30000000, 30000000,
        30000000, 30000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,
        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 3880000000, 3880000000, 3880000000,
        3880000000, 3870000000, 3230000000, 3230000000, 3210000000, 320000000, 70000000, 70000000, 40000000, 40000000,
        20000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,
        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 20000000,
        30000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 20000000,
        20000000, 20000000, 70000000, 60000000, 20000000, 30000000, 10000000, 10000000, 10000000, 100000000, 20000000,
        50000000, 1850000000, 410000000, 110000000, 110000000, 90000000, 60000000, 60000000, 40000000, 20000000,
        20000000, 20000000, 30000000, 30000000, 30000000, 10000000, 10000000, 20000000, 20000000, 20000000, 20000000,
        20000000, 20000000, 10000000, 20000000, 20000000, 20000000, 10000000, 10000000, 30000000, 20000000, 10000000,
        40000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,
        10000000, 10000000, 10000000, 40000000, 10000000, 80000000, 30000000, 30000000, 10000000, 10000000, 10000000,
        10000000, 10000000, 10000000, 10000000, 20000000, 60000000, 30000000, 30000000, 10000000, 10000000, 10000000,
        10000000, 10000000, 10000000, 160000000, 120000000, 20000000, 100000000, 50000000, 10000000, 10000000,
        640000000, 10000000, 550000000, 410000000, 80000000, 60000000, 260000000, 20000000, 170000000, 60000000,
        30000000, 20000000, 20000000, 20000000, 10000000, 10000000, 10000000, 20000000, 50000000, 40000000, 10000000,
        10000000, 10000000, 70000000, 30000000, 40000000, 290000000, 90000000, 30000000, 10000000, 10000000, 10000000,
        10000000, 210000000, 20000000, 10000000, 10000000, 10000000, 120000000, 90000000, 90000000, 60000000, 10000000,
        30000000, 30000000, 30000000, 30000000, 10000000, 20000000, 50000000, 10000000, 10000000, 10000000, 280000000,
        150000000, 150000000, 150000000, 60000000, 30000000, 80000000, 50000000, 20000000, 20000000, 20000000, 20000000,
        20000000, 20000000, 20000000, 20000000, 20000000, 20000000, 20000000, 20000000, 10000000, 10000000, 10000000,
        10000000, 10000000, 10000000, 10000000, 20000000, 20000000, 20000000, 10000000, 10000000, 10000000, 10000000,
        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,
        10000000, 10000000, 10000000, 10000000, 10000000, 130000000, 130000000, 130000000, 70000000, 30000000, 30000000,
        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,
        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 40000000, 10000000, 590000000, 20000000,
        20000000, 10000000, 40000000, 150000000, 30000000, 30000000, 120000000, 10000000, 80000000, 370000000,
        260000000, 40000000, 150000000, 110000000, 90000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,
        10000000, 10000000, 10000000, 10000000, 20000000, 20000000, 20000000, 20000000, 20000000, 70000000, 60000000,
        20000000, 20000000, 640000000, 640000000, 250000000, 250000000, 230000000, 180000000, 170000000, 170000000,
        170000000, 170000000, 50000000, 10000000, 40000000, 10000000, 10000000, 60000000, 60000000, 10000000, 30000000,
        10000000, 10000000, 10000000, 10000000, 10000000, 50000000, 50000000, 20000000, 10000000, 10000000, 10000000,
        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 390000000,
        60000000, 40000000, 30000000, 20000000, 20000000, 10000000, 10000000, 10000000, 10000000, 10000000, 30000000,
        10000000, 10000000, 10000000, 10000000, 10000000, 90000000, 10000000, 10000000, 60000000, 10000000, 40000000,
        40000000, 40000000, 30000000, 30000000, 30000000, 30000000, 30000000, 30000000, 30000000, 30000000, 10000000,
        10000000, 10000000, 10000000, 10000000, 10000000, 20000000, 10000000, 10000000, 10000000, 10000000, 10000000,
        180000000, 170000000, 50000000, 20000000, 20000000, 20000000, 20000000, 10000000, 10000000, 10000000, 10000000,
        10000000, 10000000, 10000000, 30000000, 30000000, 20000000, 20000000, 20000000, 10000000, 10000000, 10000000,
        10000000, 10000000, 10000000, 10000000, 90000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,
        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 70000000, 70000000,
        70000000, 70000000, 10000000, 20000000, 20000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,
        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 20000000, 20000000, 10000000,
        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,
        10000000, 10000000, 20000000, 20000000, 10000000, 10000000, 10000000, 10000000, 10000000, 20000000, 20000000,
        20000000, 20000000, 20000000, 10000000, 40000000, 40000000, 10000000, 10000000, 10000000, 10000000, 10000000,
        30000000, 30000000, 30000000, 30000000, 30000000, 30000000, 10000000, 10000000, 6190000000, 6170000000,
        6170000000, 6070000000, 4460000000, 10000000, 50000000, 440000000, 540000000, 20000000, 10000000, 10000000,
        10000000, 980000000, 10000000, 50000000, 480000000, 540000000, 50000000, 210000000, 30000000, 30000000,
        60000000, 180000000, 10000000, 210000000, 20000000, 20000000, 20000000, 100000000, 20000000, 20000000, 10000000,
        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 40000000, 10000000, 10000000,
        10000000, 10000000, 10000000, 10000000, 10000000, 20000000, 20000000, 20000000, 20000000, 20000000, 20000000,
        20000000, 20000000, 10000000, 10000000, 10000000, 10000000, 10000000, 170000000, 160000000, 70000000, 30000000,
        10000000, 40000000, 10000000, 170000000, 90000000, 90000000, 70000000, 20000000, 10000000, 30000000, 30000000,
        30000000, 30000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 80000000,
        10000000, 10000000, 70000000, 60000000, 10000000, 10000000, 20000000, 20000000, 20000000, 10000000, 80000000,
        10000000, 10000000, 10000000, 10000000, 10000000, 20000000, 20000000, 20000000, 20000000, 20000000, 20000000,
        20000000, 20000000, 20000000, 20000000, 20000000, 20000000, 50000000, 50000000, 50000000, 50000000, 50000000,
        50000000, 50000000, 10000000, 10000000, 10000000, 60000000, 60000000, 60000000, 60000000, 60000000, 60000000,
        60000000, 40000000, 40000000, 30000000, 30000000, 30000000, 30000000, 30000000, 30000000, 10000000, 10000000,
        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,
        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,
        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,
        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,
        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,
        10000000, 10000000,
      ],
      config: {
        unit: 'short',
      },
    },
    {
      name: 'self',
      values: [
        16460, 4100, 4100, 3670, 1130, 1060, 1020, 150, 150, 50, 30, 20, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 80,
        40, 10, 10, 530, 80, 40, 70, 50, 50, 30, 10, 10, 10, 10, 10, 10, 10, 10, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20,
        10, 390, 390, 180, 70, 50, 10, 20, 20, 10, 10, 10, 10, 10, 10, 10, 20, 10, 10, 10, 110, 80, 60, 10, 20, 20, 20,
        10, 10, 10, 10, 10, 10, 10, 20, 10, 10, 30, 20, 40, 30, 20, 10, 10, 40, 40, 10, 10, 10, 10, 10, 10, 10, 210,
        210, 210, 130, 130, 10, 50, 40, 40, 70, 10, 40, 1840, 240, 240, 50, 10, 10, 190, 130, 50, 20, 10, 10, 10, 10,
        10, 10, 80, 20, 10, 10, 10, 10, 10, 10, 10, 10, 60, 10, 1330, 1290, 320, 10, 10, 10, 130, 10, 10, 60, 30, 100,
        40, 10, 10, 40, 30, 10, 10, 70, 10, 10, 50, 40, 10, 30, 20, 10, 430, 430, 430, 430, 10, 40, 20, 370, 20, 10,
        180, 10, 30, 10, 10, 10, 5630, 5580, 5580, 5580, 5580, 5580, 5580, 5580, 5580, 5540, 5540, 5530, 5510, 5500,
        5490, 5490, 1610, 1610, 1540, 1540, 190, 170, 170, 10, 20, 120, 10, 10, 20, 20, 20, 10, 10, 10, 10, 10, 10, 10,
        10, 10, 10, 10, 850, 350, 300, 120, 110, 80, 20, 10, 80, 40, 20, 10, 10, 50, 10, 10, 10, 10, 10, 10, 10, 10, 10,
        10, 10, 10, 10, 10, 20, 20, 20, 20, 10, 10, 10, 10, 10, 370, 40, 20, 10, 100, 10, 10, 10, 30, 30, 80, 20, 10,
        10, 10, 40, 10, 10, 10, 20, 10, 20, 10, 10, 10, 10, 10, 10, 10, 110, 110, 60, 20, 20, 10, 10, 10, 10, 10, 10,
        10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 480, 150, 10, 130, 10, 10, 50, 140, 80, 40, 10, 10, 20,
        10, 10, 20, 120, 60, 40, 10, 10, 10, 10, 20, 30, 30, 20, 20, 20, 20, 20, 20, 20, 20, 20, 10, 10, 10, 10, 10, 10,
        10, 10, 10, 10, 10, 60, 60, 60, 60, 30, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 20, 20, 20, 20, 20, 30,
        30, 30, 30, 30, 30, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 3880, 3880, 3880, 3880,
        3870, 3230, 3230, 3210, 320, 70, 70, 40, 40, 20, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
        10, 10, 10, 10, 20, 30, 10, 10, 10, 10, 10, 10, 10, 10, 10, 20, 20, 20, 70, 60, 20, 30, 10, 10, 10, 100, 20, 50,
        1850, 410, 110, 110, 90, 60, 60, 40, 20, 20, 20, 30, 30, 30, 10, 10, 20, 20, 20, 20, 20, 20, 10, 20, 20, 20, 10,
        10, 30, 20, 10, 40, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 40, 10, 80, 30, 30, 10, 10, 10, 10, 10,
        10, 10, 20, 60, 30, 30, 10, 10, 10, 10, 10, 10, 160, 120, 20, 100, 50, 10, 10, 640, 10, 550, 410, 80, 60, 260,
        20, 170, 60, 30, 20, 20, 20, 10, 10, 10, 20, 50, 40, 10, 10, 10, 70, 30, 40, 290, 90, 30, 10, 10, 10, 10, 210,
        20, 10, 10, 10, 120, 90, 90, 60, 10, 30, 30, 30, 30, 10, 20, 50, 10, 10, 10, 280, 150, 150, 150, 60, 30, 80, 50,
        20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 10, 10, 10, 10, 10, 10, 10, 20, 20, 20, 10, 10, 10, 10, 10, 10,
        10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 130, 130, 130, 70, 30, 30, 10, 10, 10, 10, 10, 10, 10,
        10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 40, 10, 590, 20, 20, 10, 40, 150, 30, 30, 120, 10, 80, 370, 260, 40,
        150, 110, 90, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 20, 20, 20, 20, 20, 70, 60, 20, 20, 640, 640, 250, 250,
        230, 180, 170, 170, 170, 170, 50, 10, 40, 10, 10, 60, 60, 10, 30, 10, 10, 10, 10, 10, 50, 50, 20, 10, 10, 10,
        10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 390, 60, 40, 30, 20, 20, 10, 10, 10, 10, 10, 30, 10, 10, 10, 10, 10, 90,
        10, 10, 60, 10, 40, 40, 40, 30, 30, 30, 30, 30, 30, 30, 30, 10, 10, 10, 10, 10, 10, 20, 10, 10, 10, 10, 10, 180,
        170, 50, 20, 20, 20, 20, 10, 10, 10, 10, 10, 10, 10, 30, 30, 20, 20, 20, 10, 10, 10, 10, 10, 10, 10, 90, 10, 10,
        10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 70, 70, 70, 70, 10, 20, 20, 10, 10, 10, 10, 10, 10, 10, 10,
        10, 10, 10, 10, 10, 10, 20, 20, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 20, 20, 10, 10, 10, 10,
        10, 20, 20, 20, 20, 20, 10, 40, 40, 10, 10, 10, 10, 10, 30, 30, 30, 30, 30, 30, 10, 10, 6190, 6170, 6170, 6070,
        4460, 10, 50, 440, 540, 20, 10, 10, 10, 980, 10, 50, 480, 540, 50, 210, 30, 30, 60, 180, 10, 210, 20, 20, 20,
        100, 20, 20, 10, 10, 10, 10, 10, 10, 10, 10, 10, 40, 10, 10, 10, 10, 10, 10, 10, 20, 20, 20, 20, 20, 20, 20, 20,
        10, 10, 10, 10, 10, 170, 160, 70, 30, 10, 40, 10, 170, 90, 90, 70, 20, 10, 30, 30, 30, 30, 10, 10, 10, 10, 10,
        10, 10, 10, 80, 10, 10, 70, 60, 10, 10, 20, 20, 20, 10, 80, 10, 10, 10, 10, 10, 20, 20, 20, 20, 20, 20, 20, 20,
        20, 20, 20, 20, 50, 50, 50, 50, 50, 50, 50, 10, 10, 10, 60, 60, 60, 60, 60, 60, 60, 40, 40, 30, 30, 30, 30, 30,
        30, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
        10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
        10, 10, 10, 10,
      ],
      config: {
        unit: 'short',
      },
    },
    {
      name: 'label',
      type: FieldType.enum,
      values: [
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12, 12, 13, 14, 15, 5, 6, 7, 8, 9, 11, 12, 12, 16, 11, 12, 17, 18, 19,
        20, 21, 22, 23, 24, 25, 26, 27, 12, 12, 28, 29, 30, 11, 12, 31, 32, 27, 12, 12, 12, 12, 33, 11, 34, 11, 35, 36,
        37, 27, 27, 11, 12, 38, 10, 12, 39, 40, 41, 42, 43, 44, 27, 12, 45, 46, 47, 48, 49, 50, 49, 51, 52, 53, 54, 55,
        56, 57, 27, 27, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 11, 12, 73, 69, 70, 71, 72, 11, 12,
        12, 73, 69, 70, 71, 72, 11, 12, 12, 74, 75, 11, 74, 75, 11, 12, 12, 76, 62, 77, 78, 79, 80, 81, 27, 27, 12, 82,
        83, 84, 85, 86, 87, 88, 89, 90, 12, 91, 84, 85, 86, 87, 88, 89, 90, 27, 12, 85, 86, 87, 88, 89, 90, 12, 12, 92,
        93, 94, 95, 96, 97, 98, 27, 27, 27, 12, 62, 99, 100, 101, 102, 103, 12, 12, 104, 105, 81, 106, 107, 12, 27, 27,
        12, 12, 12, 12, 108, 109, 12, 110, 111, 112, 10, 113, 11, 12, 114, 115, 116, 117, 118, 117, 119, 120, 121, 122,
        123, 124, 125, 126, 127, 128, 129, 130, 11, 12, 12, 12, 12, 12, 12, 131, 132, 133, 11, 12, 11, 12, 112, 10, 134,
        11, 12, 135, 11, 12, 136, 11, 12, 137, 11, 12, 138, 139, 140, 141, 142, 143, 144, 145, 12, 11, 12, 143, 144, 11,
        12, 146, 11, 12, 147, 148, 149, 150, 151, 109, 11, 12, 152, 11, 153, 154, 140, 155, 156, 157, 158, 159, 11, 160,
        11, 12, 161, 11, 12, 162, 11, 12, 163, 164, 11, 12, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176,
        177, 11, 12, 12, 178, 179, 180, 181, 182, 183, 27, 184, 27, 185, 186, 187, 188, 11, 12, 188, 11, 12, 187, 188,
        11, 12, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 12, 27, 27, 12, 193, 194, 195, 196, 197, 198, 12, 27,
        27, 12, 199, 61, 61, 192, 193, 194, 195, 196, 197, 198, 12, 12, 199, 61, 12, 200, 11, 12, 201, 202, 203, 204,
        205, 53, 62, 63, 64, 74, 75, 11, 12, 74, 75, 11, 11, 12, 12, 206, 207, 208, 209, 210, 211, 212, 10, 12, 213,
        214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 187, 188, 61, 11, 12, 12, 215, 216, 217, 218, 219,
        220, 221, 222, 224, 225, 188, 61, 11, 12, 12, 12, 12, 12, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236,
        237, 238, 19, 20, 21, 239, 240, 241, 242, 243, 244, 245, 246, 29, 247, 32, 12, 12, 12, 12, 248, 249, 219, 250,
        251, 252, 253, 254, 255, 256, 234, 257, 235, 236, 258, 259, 260, 261, 262, 18, 19, 20, 21, 239, 240, 241, 242,
        243, 244, 245, 263, 11, 12, 12, 235, 236, 258, 259, 260, 261, 262, 19, 20, 21, 239, 240, 241, 242, 243, 244,
        245, 263, 11, 12, 12, 18, 19, 20, 21, 239, 240, 241, 242, 243, 244, 245, 263, 11, 12, 12, 264, 11, 265, 266,
        267, 210, 211, 212, 10, 12, 12, 268, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 19, 20,
        21, 239, 240, 241, 242, 243, 244, 245, 28, 29, 30, 11, 246, 29, 30, 11, 269, 230, 231, 232, 233, 234, 257, 235,
        236, 237, 238, 18, 19, 20, 21, 239, 240, 241, 242, 243, 244, 245, 246, 28, 29, 30, 11, 270, 11, 12, 271, 272,
        273, 274, 275, 53, 54, 12, 62, 63, 64, 74, 75, 11, 12, 12, 74, 75, 59, 60, 61, 12, 11, 12, 27, 12, 27, 12, 12,
        12, 276, 11, 12, 277, 198, 27, 278, 27, 279, 158, 12, 280, 281, 282, 283, 284, 285, 212, 10, 12, 212, 10, 12,
        12, 12, 12, 286, 11, 12, 287, 288, 289, 290, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302,
        303, 304, 305, 306, 307, 308, 309, 310, 311, 61, 312, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310,
        311, 61, 12, 12, 12, 12, 12, 313, 289, 290, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302,
        303, 304, 305, 306, 307, 308, 309, 310, 311, 61, 312, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310,
        311, 61, 12, 12, 12, 12, 12, 12, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306,
        307, 308, 309, 310, 311, 61, 312, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 61, 301, 302, 303,
        304, 305, 306, 307, 308, 309, 310, 311, 61, 12, 12, 11, 314, 315, 316, 317, 318, 319, 320, 299, 300, 301, 302,
        303, 304, 305, 306, 307, 308, 309, 310, 311, 61, 312, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310,
        311, 61, 12, 12, 12, 12, 11, 321, 11, 322, 323, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306,
        307, 308, 309, 310, 311, 61, 312, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 61, 301, 302, 303,
        304, 305, 306, 307, 308, 309, 310, 311, 61, 12, 12, 12, 324, 325, 292, 293, 294, 295, 296, 297, 298, 299, 300,
        301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 61, 312, 300, 301, 302, 303, 304, 305, 306, 307, 308,
        309, 310, 311, 61, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 61, 12, 12, 12, 12, 11, 12, 12, 11,
        12, 326, 327, 109, 328, 158, 12, 329, 109, 330, 331, 332, 10, 328, 158, 10, 12, 333, 10, 12, 334, 335, 336, 337,
        338, 301, 12, 339, 337, 338, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 61, 12, 340, 336, 337, 338,
        301, 12, 12, 12, 341, 12, 342, 343, 344, 335, 339, 337, 338, 301, 12, 340, 12, 12, 345, 346, 11, 12, 12, 347,
        348, 349, 11, 350, 351, 198, 352, 353, 354, 355, 356, 357, 358, 11, 12, 359, 158, 360, 358, 11, 11, 12, 361,
        362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 196, 197, 198, 12, 12,
        27, 12, 12, 380, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 196, 197, 198, 12, 12, 12, 12,
        381, 69, 382, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 196, 197, 198, 12, 12, 12, 12, 12, 12, 12, 251,
        252, 253, 254, 255, 256, 234, 257, 235, 236, 258, 259, 260, 261, 262, 18, 19, 20, 21, 239, 240, 241, 242, 243,
        244, 245, 12, 235, 236, 258, 259, 260, 261, 262, 19, 20, 21, 239, 240, 241, 242, 243, 244, 245, 246, 29, 247,
        32, 12, 12, 250, 251, 252, 253, 254, 255, 256, 234, 257, 235, 236, 258, 259, 260, 261, 262, 18, 19, 20, 21, 239,
        240, 241, 242, 243, 244, 245, 246, 28, 29, 30, 11, 12, 235, 236, 258, 259, 260, 261, 262, 19, 20, 21, 239, 240,
        241, 242, 243, 244, 245, 28, 29, 247, 32, 12, 246, 29, 30, 11, 18, 19, 20, 21, 239, 240, 241, 242, 243, 244,
        245, 246, 29, 30, 11, 12, 219, 250, 251, 252, 253, 254, 255, 256, 234, 257, 235, 236, 258, 259, 260, 261, 262,
        18, 19, 20, 21, 239, 240, 241, 242, 243, 244, 245, 28, 29, 30, 11, 235, 236, 258, 259, 260, 261, 262, 19, 20,
        21, 239, 240, 241, 242, 243, 244, 245, 28, 29, 30, 11, 18, 19, 20, 21, 239, 240, 241, 242, 243, 244, 245, 28,
        29, 30, 11, 383, 384, 385, 386, 387, 388, 389, 61, 390, 18, 19, 20, 21, 244, 245, 391, 11, 12, 19, 20, 21, 244,
        245, 391, 11, 12, 12, 12, 11, 392, 11, 393, 394, 395, 396, 397, 11, 11, 398, 11, 12, 399, 11, 400, 401, 53, 62,
        63, 64, 65, 66, 67, 68, 73, 69, 70, 71, 72, 11, 12, 73, 69, 70, 71, 72, 11, 12, 402, 11, 403, 404, 11, 405, 406,
        407, 408, 12, 12, 409, 12, 12, 410, 411, 61, 27, 12, 412, 413, 27, 414, 415, 198, 12, 12, 8, 9, 10, 11, 416,
        417, 8, 9, 10, 12, 9, 10, 12, 27, 418, 183, 12, 12, 11, 27, 12, 12, 419, 11, 12, 420, 421, 422, 423, 424, 425,
        426, 427, 428, 11, 12, 429, 11, 12, 426, 427, 429, 11, 12, 12, 424, 425, 426, 427, 428, 11, 12, 429, 11, 12,
        427, 429, 11, 12, 12, 12, 12, 430, 431, 430, 432, 433, 117, 118, 119, 120, 27, 12, 430, 434, 435, 436, 437, 438,
        439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 197, 198, 12, 449, 450, 451, 452, 453, 453, 423, 424, 425,
        426, 427, 428, 11, 12, 429, 11, 454, 441, 442, 443, 444, 445, 446, 455, 224, 194, 456, 447, 448, 457, 11, 12,
        458, 459, 441, 442, 443, 444, 445, 446, 223, 224, 194, 456, 447, 448, 457, 11, 455, 224, 194, 456, 447, 448,
        457, 11, 12, 12, 460, 461, 61, 11, 12, 462, 463, 464, 442, 465, 193, 194, 447, 448, 197, 198, 12, 12, 457, 11,
        27, 12, 171, 466, 467, 11, 12, 468, 469, 470, 471, 472, 117, 118, 119, 120, 12, 473, 474, 475, 476, 477, 478,
        479, 480, 12, 481, 12, 12, 12, 12, 12, 12, 482, 438, 464, 450, 451, 452, 453, 453, 423, 424, 425, 426, 427, 428,
        11, 429, 11, 12, 430, 483, 430, 484, 485, 117, 118, 119, 120, 12, 486, 487, 224, 194, 447, 448, 197, 198, 12,
        12, 457, 11, 12, 12, 12, 12, 488, 435, 436, 437, 438, 439, 440, 449, 450, 451, 452, 453, 453, 423, 424, 425,
        426, 427, 12, 12, 458, 459, 441, 442, 443, 444, 445, 446, 455, 224, 194, 456, 447, 448, 457, 11, 12, 460, 461,
        61, 11, 462, 12, 464, 442, 465, 193, 194, 447, 448, 197, 198, 12, 12, 457, 11, 27, 12, 171, 466, 467, 11, 12,
        468, 469, 470, 471, 472, 117, 118, 119, 120, 12, 473, 474, 475, 476, 477, 478, 12, 12, 12, 12, 12, 482, 438,
        464, 450, 451, 452, 453, 453, 423, 424, 425, 426, 427, 428, 11, 429, 11, 12, 12, 430, 483, 430, 484, 485, 117,
        118, 119, 120, 12, 486, 487, 224, 194, 447, 448, 197, 198, 12, 12, 457, 11, 12, 12, 12, 12, 434, 435, 436, 437,
        438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 197, 198, 12, 12, 12, 449, 450, 451, 452, 453, 453, 423,
        424, 425, 426, 427, 428, 11, 429, 11, 454, 441, 442, 443, 444, 445, 446, 455, 223, 224, 194, 456, 447, 448, 457,
        11, 12, 12, 458, 459, 441, 442, 443, 444, 445, 446, 455, 223, 224, 194, 456, 447, 448, 457, 11, 12, 12, 460,
        461, 61, 11, 27, 462, 27, 12, 464, 442, 465, 192, 193, 194, 447, 448, 197, 198, 12, 27, 12, 457, 11, 12, 12,
        171, 466, 467, 11, 12, 468, 469, 470, 471, 472, 117, 118, 119, 120, 27, 12, 473, 474, 475, 476, 477, 478, 479,
        480, 12, 12, 481, 27, 12, 12, 12, 12, 12, 12, 482, 438, 464, 450, 451, 452, 453, 453, 423, 424, 425, 426, 427,
        428, 11, 429, 11, 12, 430, 483, 430, 484, 485, 486, 487, 223, 224, 194, 447, 448, 197, 198, 12, 12, 457, 11, 12,
        12, 12, 12, 12, 12, 12, 489, 490, 491, 27, 12, 492, 493, 494, 46, 47, 48, 49, 50, 49, 51, 52, 53, 62, 63, 64,
        65, 66, 67, 68, 73, 69, 70, 71, 72, 11, 12, 73, 69, 70, 71, 72, 11, 12, 12, 12, 74, 75, 11, 12, 74, 75, 11, 12,
        12, 12, 12, 52, 53, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 11, 73, 69, 70, 71, 72, 11, 12, 12, 73, 69, 70,
        71, 72, 11, 12, 12, 74, 75, 11, 74, 75, 11, 12, 12, 268, 495, 496, 497, 498, 374, 375, 376, 377, 378, 379, 196,
        197, 198, 12, 12, 12, 12, 499, 500, 501, 502, 503, 504, 505, 506, 177, 11, 12, 223, 224, 507, 374, 375, 376,
        377, 378, 379, 196, 197, 198, 224, 507, 374, 375, 376, 377, 378, 379, 196, 197, 198, 12, 12, 12, 508, 117, 118,
        119, 120, 27, 248, 249, 219, 250, 251, 252, 253, 254, 255, 256, 234, 257, 235, 236, 258, 259, 509, 12, 12, 235,
        236, 258, 259, 509, 505, 506, 177, 11, 12, 378, 379, 196, 197, 198, 510, 496, 497, 498, 378, 379, 196, 12, 12,
        12, 12, 511, 512, 513, 514, 515, 61, 12, 12, 12, 516, 223, 224, 517, 518, 187, 188, 11, 12, 12, 224, 517, 518,
        187, 188, 11, 12, 12, 12, 519, 491, 12, 54, 58, 59, 60, 61, 12, 12, 11, 27, 12, 520, 11, 521, 80, 27, 522, 80,
        81, 27, 27, 12, 523, 80, 81, 27, 27, 12, 524, 80, 81, 27, 27, 12, 525, 60, 81, 27, 27, 12, 526, 27, 12, 12, 527,
        528, 529, 11, 27, 530, 531, 532, 12, 12, 27, 12, 533, 534, 535, 536, 537, 538, 61, 539, 11, 12, 540, 541, 542,
        543, 12, 544, 301, 545, 396, 397, 11, 12, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 61, 12, 546, 61, 12,
        12, 547, 548, 549, 198, 12, 12, 550, 430, 551, 552, 553, 554, 555, 556, 557, 408, 12, 558, 559, 560, 559, 27,
        12, 12, 12, 561, 10, 11, 12, 430, 431, 430, 432, 430, 434, 435, 436, 437, 482, 430, 562, 563, 11, 564, 61, 12,
        488, 435, 436, 437, 482, 430, 562, 563, 11, 564, 61, 12, 434, 435, 436, 437, 482, 430, 562, 563, 11, 564, 61,
        12, 12, 12, 431, 430, 565, 430, 434, 435, 436, 437, 482, 430, 562, 12, 430, 566, 430, 567, 568, 569, 158, 12,
        488, 434, 435, 436, 437, 482, 430, 562, 12, 430, 566, 430, 567, 568, 569, 158, 12, 12, 12, 12, 12, 570, 571,
        572, 573, 61, 12, 572, 573, 61, 12, 574, 27, 575, 11, 576, 11, 12,
      ],
      config: {
        type: {
          enum: {
            text: [
              'total',
              'cloud.google.com/go/storage.(*httpStorageClient).OpenWriter.func1',
              'google.golang.org/api/storage/v1.(*ObjectsInsertCall).Do',
              'google.golang.org/api/internal/gensupport.(*ResumableUpload).Upload',
              'google.golang.org/api/internal/gensupport.(*ResumableUpload).transferChunk',
              'google.golang.org/api/internal/gensupport.(*MediaBuffer).Chunk',
              'google.golang.org/api/internal/gensupport.(*MediaBuffer).loadChunk',
              'github.com/googleapis/gax-go/v2.(*contentSniffer).Read',
              'io.(*PipeReader).Read',
              'io.(*pipe).read',
              'runtime.chansend1',
              'runtime.selectgo',
              'other',
              'google.golang.org/api/storage/v1.(*ObjectsInsertCall).Media',
              'google.golang.org/api/internal/gensupport.NewInfoFromMedia',
              'google.golang.org/api/internal/gensupport.PrepareUpload',
              'crypto/tls.(*Conn).handshakeContext.func2',
              'github.com/bufbuild/connect-go.(*duplexHTTPCall).makeRequest',
              'net/http.(*Client).Do',
              'net/http.(*Client).do',
              'net/http.(*Client).send',
              'net/http.send',
              'github.com/grafana/pyroscope/pkg/util.RoundTripperFunc.RoundTrip',
              'github.com/grafana/pyroscope/pkg/util.WrapWithInstrumentedHTTPTransport.func1',
              'github.com/opentracing-contrib/go-stdlib/nethttp.(*Transport).RoundTrip',
              'github.com/opentracing-contrib/go-stdlib/nethttp.(*Tracer).start',
              'github.com/uber/jaeger-client-go.(*Span).Context',
              'sync.(*Mutex).Lock',
              'golang.org/x/net/http2.(*Transport).RoundTrip',
              'golang.org/x/net/http2.(*Transport).RoundTripOpt',
              'golang.org/x/net/http2.(*ClientConn).RoundTrip',
              'golang.org/x/net/http2.(*clientConnPool).GetClientConn',
              'golang.org/x/net/http2.(*clientConnPool).getClientConn',
              'github.com/dgraph-io/ristretto.(*Cache).processItems',
              'github.com/golang/glog.(*fileSink).flushDaemon',
              'github.com/grafana/dskit/kv/memberlist.(*KV).processValueUpdate',
              'github.com/grafana/dskit/kv/memberlist.(*KV).mergeBytesValueForKey',
              'github.com/grafana/dskit/kv/memberlist.(*KV).mergeValueForKey',
              'github.com/grafana/dskit/kv/memberlist.(*TCPTransport).handleConnection',
              'github.com/grafana/dskit/ring.DoBatch.func1',
              'github.com/grafana/mimir/pkg/distributor.(*Distributor).push.func2',
              'github.com/grafana/mimir/pkg/distributor.(*Distributor).send',
              'github.com/grafana/mimir/pkg/ingester/client.(*bufferPoolingIngesterClient).Push',
              'github.com/grafana/mimir/pkg/ingester/client.(*wrappedRequest).ReturnBuffersToPool',
              'github.com/grafana/mimir/pkg/util/pool.(*FastReleasingSlabPool[...]).Release',
              'github.com/grafana/mimir/pkg/ingester/client.pushRaw',
              'google.golang.org/grpc.(*ClientConn).Invoke',
              'google.golang.org/grpc.chainUnaryClientInterceptors.func1',
              'github.com/opentracing-contrib/go-grpc.OpenTracingClientInterceptor.func1',
              'google.golang.org/grpc.getChainUnaryInvoker.func1',
              'github.com/weaveworks/common/middleware.ClientUserHeaderInterceptor',
              'github.com/weaveworks/common/middleware.UnaryClientInstrumentInterceptor.func1',
              'google.golang.org/grpc.invoke',
              'google.golang.org/grpc.(*clientStream).RecvMsg',
              'google.golang.org/grpc.(*clientStream).finish',
              'context.WithCancel.func1',
              'context.(*cancelCtx).cancel',
              'context.removeChild',
              'google.golang.org/grpc.(*csAttempt).finish',
              'google.golang.org/grpc/internal/transport.(*http2Client).CloseStream',
              'google.golang.org/grpc/internal/transport.(*http2Client).closeStream',
              'runtime.chanrecv1',
              'google.golang.org/grpc.(*clientStream).withRetry',
              'google.golang.org/grpc.(*clientStream).RecvMsg.func1',
              'google.golang.org/grpc.(*csAttempt).recvMsg',
              'google.golang.org/grpc.recv',
              'google.golang.org/grpc.recvAndDecompress',
              'google.golang.org/grpc.(*parser).recvMsg',
              'google.golang.org/grpc/internal/transport.(*Stream).Read',
              'io.ReadAtLeast',
              'google.golang.org/grpc/internal/transport.(*transportReader).Read',
              'google.golang.org/grpc/internal/transport.(*recvBufferReader).Read',
              'google.golang.org/grpc/internal/transport.(*recvBufferReader).readClient',
              'io.ReadFull',
              'google.golang.org/grpc/internal/transport.(*Stream).RecvCompress',
              'google.golang.org/grpc/internal/transport.(*Stream).waitOnHeader',
              'google.golang.org/grpc.(*clientStream).SendMsg',
              'google.golang.org/grpc.(*clientStream).SendMsg.func2',
              'google.golang.org/grpc.(*csAttempt).sendMsg',
              'google.golang.org/grpc/internal/transport.(*http2Client).Write',
              'google.golang.org/grpc/internal/transport.(*controlBuffer).put',
              'google.golang.org/grpc/internal/transport.(*controlBuffer).executeAndPut',
              'google.golang.org/grpc.prepareMsg',
              'google.golang.org/grpc.encode',
              'github.com/golang/protobuf/proto.Marshal',
              'github.com/golang/protobuf/proto.marshalAppend',
              'google.golang.org/protobuf/proto.MarshalOptions.MarshalAppend',
              'google.golang.org/protobuf/proto.MarshalOptions.marshal',
              'google.golang.org/protobuf/internal/impl.legacyMarshal',
              'github.com/grafana/mimir/pkg/ingester/client.(*wrappedRequest).Marshal',
              'github.com/grafana/mimir/pkg/util/pool.(*FastReleasingSlabPool[...]).Get',
              'google.golang.org/grpc/encoding/proto.codec.Marshal',
              'google.golang.org/grpc.newClientStream',
              'google.golang.org/grpc.newClientStream.func2',
              'google.golang.org/grpc.newClientStreamWithParams',
              'context.WithCancel',
              'context.withCancel',
              'context.propagateCancel',
              'context.(*cancelCtx).Done',
              'google.golang.org/grpc.newClientStreamWithParams.func2',
              'google.golang.org/grpc.(*csAttempt).getTransport',
              'google.golang.org/grpc.(*ClientConn).getTransport',
              'google.golang.org/grpc.(*pickerWrapper).pick',
              'google.golang.org/grpc.(*addrConn).getReadyTransport',
              'google.golang.org/grpc.(*csAttempt).newStream',
              'google.golang.org/grpc/internal/transport.(*http2Client).NewStream',
              'google.golang.org/grpc/internal/transport.(*http2Client).NewStream.func5',
              'google.golang.org/grpc/internal/transport.(*http2Client).NewStream.func3',
              'github.com/grafana/dskit/ring.DoBatch.func2',
              'sync.(*WaitGroup).Wait',
              'github.com/grafana/dskit/services.(*BasicService).main',
              'github.com/grafana/backend-enterprise/pkg/aggregator.(*Aggregator).running',
              'github.com/grafana/backend-enterprise/pkg/aggregator.(*worker).dispatch',
              'github.com/segmentio/kafka-go.(*Reader).FetchMessage',
              'github.com/grafana/backend-enterprise/pkg/aggregator.(*batcher).running',
              'github.com/grafana/backend-enterprise/pkg/aggregator.(*batcher).flush',
              'github.com/grafana/backend-enterprise/pkg/aggregator.(*batcher).pushUserBatch',
              'github.com/go-kit/log.(*context).Log',
              'github.com/go-kit/log/level.(*logger).Log',
              'github.com/go-kit/log.logfmtLogger.Log',
              'github.com/go-kit/log.(*fdSyncWriter).Write',
              'github.com/grafana/backend-enterprise/pkg/aggregator.(*batcher).pushWithTimeout',
              'github.com/grafana/mimir/pkg/distributor.(*Distributor).Push',
              'github.com/grafana/mimir/pkg/distributor.(*Distributor).limitsMiddleware.func1',
              'github.com/grafana/mimir/pkg/distributor.(*Distributor).metricsMiddleware.func1',
              'github.com/grafana/mimir/pkg/distributor.(*Distributor).prePushHaDedupeMiddleware.func1',
              'github.com/grafana/mimir/pkg/distributor.(*Distributor).prePushRelabelMiddleware.func1',
              'github.com/grafana/mimir/pkg/distributor.(*Distributor).prePushValidationMiddleware.func1',
              'github.com/grafana/backend-enterprise/pkg/cloud/bi.(*DistributorWriteEventProcessor).NewDistributorPushWrapper.func1.1',
              'github.com/grafana/mimir/pkg/distributor.(*Distributor).push',
              'github.com/grafana/dskit/ring.DoBatch',
              'github.com/grafana/backend-enterprise/pkg/aggregator.(*offsetCommitterExplicit).handle',
              'github.com/grafana/backend-enterprise/pkg/aggregator.(*offsetCommitterExplicit).commitOffset',
              'github.com/segmentio/kafka-go.(*Writer).WriteMessages',
              'github.com/grafana/backend-enterprise/pkg/aggregator.(*worker).running',
              'github.com/grafana/backend-enterprise/pkg/cloud/bi.(*DistributorWriteEventProcessor).run',
              'github.com/grafana/dskit/ring.(*BasicLifecycler).running',
              'github.com/grafana/dskit/ring.(*Lifecycler).loop',
              'github.com/grafana/dskit/ring.(*Ring).loop',
              'github.com/grafana/dskit/kv.metrics.WatchKey',
              'github.com/weaveworks/common/instrument.CollectedRequest',
              'github.com/grafana/dskit/kv.metrics.WatchKey.func1',
              'github.com/grafana/dskit/kv.(*prefixedKVClient).WatchKey',
              'github.com/grafana/dskit/kv/memberlist.(*Client).WatchKey',
              'github.com/grafana/dskit/kv/memberlist.(*KV).WatchKey',
              'github.com/grafana/dskit/kv/memberlist.(*KV).get',
              'github.com/grafana/dskit/runtimeconfig.(*Manager).loop',
              'github.com/grafana/dskit/services.NewTimerService.func1',
              'github.com/grafana/dskit/ring/client.(*Pool).iteration',
              'github.com/grafana/dskit/ring/client.(*Pool).cleanUnhealthy',
              'github.com/grafana/dskit/concurrency.ForEachJob',
              'golang.org/x/sync/errgroup.(*Group).Wait',
              'github.com/grafana/mimir/pkg/distributor.(*Distributor).running',
              'github.com/grafana/mimir/pkg/distributor.(*haTracker).loop',
              'github.com/grafana/dskit/kv.metrics.WatchPrefix',
              'github.com/grafana/dskit/kv.metrics.WatchPrefix.func1',
              'github.com/grafana/dskit/kv.(*prefixedKVClient).WatchPrefix',
              'github.com/grafana/dskit/kv/etcd.(*Client).WatchPrefix',
              'runtime.chanrecv2',
              'github.com/grafana/pyroscope/pkg/scheduler.(*Scheduler).running',
              'github.com/grafana/pyroscope/pkg/storegateway.(*StoreGateway).running',
              'github.com/grafana/pyroscope/pkg/usagestats.(*Reporter).running',
              'github.com/grafana/pyroscope/pkg/util/servicediscovery.(*ringServiceDiscovery).running',
              'github.com/grafana/mimir/pkg/distributor.(*haTracker).loop.func1',
              'github.com/grafana/mimir/pkg/distributor.(*haTracker).updateKVLoop',
              'github.com/grafana/pyroscope/pkg/distributor.(*Distributor).Push.func1',
              'github.com/grafana/pyroscope/pkg/distributor.(*Distributor).sendProfiles',
              'github.com/grafana/pyroscope/pkg/distributor.(*Distributor).sendProfilesErr',
              'github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1/ingesterv1connect.(*ingesterServiceClient).Push',
              'github.com/bufbuild/connect-go.(*Client[...]).CallUnary',
              'github.com/bufbuild/connect-go.NewClient[...].func2',
              'github.com/grafana/pyroscope/pkg/tenant.(*authInterceptor).WrapUnary.func1',
              'github.com/bufbuild/connect-go.NewClient[...].func1',
              'github.com/bufbuild/connect-go.(*errorTranslatingClientConn).CloseResponse',
              'github.com/bufbuild/connect-go.(*connectUnaryClientConn).CloseResponse',
              'github.com/bufbuild/connect-go.(*duplexHTTPCall).CloseRead',
              'github.com/opentracing-contrib/go-stdlib/nethttp.closeTracker.Close',
              'golang.org/x/net/http2.transportResponseBody.Close',
              'github.com/bufbuild/connect-go.(*errorTranslatingClientConn).Send',
              'github.com/bufbuild/connect-go.(*connectUnaryClientConn).Send',
              'github.com/bufbuild/connect-go.(*connectUnaryMarshaler).Marshal',
              'github.com/bufbuild/connect-go.(*bufferPool).Put',
              'sync.(*Pool).Put',
              'sync.(*Pool).pin',
              'sync.(*Pool).pinSlow',
              'github.com/bufbuild/connect-go.(*connectUnaryMarshaler).write',
              'github.com/bufbuild/connect-go.(*duplexHTTPCall).Write',
              'io.(*PipeWriter).Write',
              'io.(*pipe).write',
              'github.com/bufbuild/connect-go.receiveUnaryResponse[...]',
              'github.com/bufbuild/connect-go.(*errorTranslatingClientConn).Receive',
              'github.com/bufbuild/connect-go.(*connectUnaryClientConn).Receive',
              'github.com/bufbuild/connect-go.(*connectUnaryUnmarshaler).Unmarshal',
              'github.com/bufbuild/connect-go.(*connectUnaryUnmarshaler).UnmarshalFunc',
              'bytes.(*Buffer).ReadFrom',
              'github.com/bufbuild/connect-go.(*duplexHTTPCall).Read',
              'golang.org/x/net/http2.transportResponseBody.Read',
              'golang.org/x/net/http2.(*pipe).Read',
              'sync.(*Cond).Wait',
              'github.com/bufbuild/connect-go.(*duplexHTTPCall).BlockUntilResponseReady',
              'github.com/grafana/pyroscope/pkg/frontend.(*frontendSchedulerWorker).schedulerLoop.func1',
              'github.com/grafana/pyroscope/pkg/frontend.(*frontendSchedulerWorker).start.func1',
              'github.com/grafana/pyroscope/pkg/frontend.(*frontendSchedulerWorker).runOne',
              'github.com/grafana/pyroscope/pkg/frontend.(*frontendSchedulerWorker).runOne.func1',
              'github.com/grafana/pyroscope/pkg/frontend.(*frontendSchedulerWorker).schedulerLoop',
              'github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.(*schedulerForFrontendFrontendLoopClient).Recv',
              'github.com/grafana/pyroscope/pkg/ingester.(*instance).loop',
              'github.com/grafana/pyroscope/pkg/ingester.(*instance).runShipper',
              'github.com/grafana/pyroscope/pkg/phlaredb/shipper.(*Shipper).Sync',
              'github.com/grafana/pyroscope/pkg/phlaredb.(*PhlareDB).BlockMetas',
              'github.com/grafana/pyroscope/pkg/phlaredb.(*BlockQuerier).BlockMetas',
              'github.com/grafana/pyroscope/pkg/phlaredb.(*BlockQuerier).BlockMetas.func2',
              'golang.org/x/sync/errgroup.(*Group).Go',
              'github.com/grafana/pyroscope/pkg/phlaredb/shipper.(*Shipper).upload',
              'github.com/grafana/pyroscope/pkg/phlaredb/block.Upload',
              'github.com/grafana/pyroscope/pkg/phlaredb/block.upload',
              'github.com/thanos-io/objstore.UploadFile',
              'github.com/grafana/pyroscope/pkg/objstore.(*PrefixedBucket).Upload',
              'github.com/thanos-io/objstore.TracingBucket.Upload',
              'github.com/thanos-io/objstore/tracing.DoWithSpan',
              'github.com/thanos-io/objstore.TracingBucket.Upload.func1',
              'github.com/thanos-io/objstore.(*metricBucket).Upload',
              'github.com/thanos-io/objstore/providers/gcs.(*Bucket).Upload',
              'io.Copy',
              'io.copyBuffer',
              'cloud.google.com/go/storage.(*Writer).Write',
              'github.com/grafana/pyroscope/pkg/objstore.(*PrefixedBucket).Get',
              'github.com/thanos-io/objstore.TracingBucket.Get',
              'github.com/thanos-io/objstore.(*metricBucket).Get',
              'github.com/thanos-io/objstore/providers/gcs.(*Bucket).Get',
              'cloud.google.com/go/storage.(*ObjectHandle).NewRangeReader',
              'cloud.google.com/go/storage.(*httpStorageClient).NewRangeReader',
              'cloud.google.com/go/storage.(*httpStorageClient).newRangeReaderXML',
              'cloud.google.com/go/storage.readerReopen.func1',
              'cloud.google.com/go/storage.run',
              'cloud.google.com/go/internal.retry',
              'cloud.google.com/go/storage.run.func1',
              'cloud.google.com/go/storage.readerReopen.func1.1',
              'cloud.google.com/go/storage.(*httpStorageClient).newRangeReaderXML.func1',
              'golang.org/x/oauth2.(*Transport).RoundTrip',
              'go.opencensus.io/plugin/ochttp.(*Transport).RoundTrip',
              'go.opencensus.io/plugin/ochttp.statsTransport.RoundTrip',
              'go.opencensus.io/plugin/ochttp.(*traceTransport).RoundTrip',
              'google.golang.org/api/transport/http.(*parameterTransport).RoundTrip',
              'net/http.(*Transport).RoundTrip',
              'net/http.(*Transport).roundTrip',
              'golang.org/x/net/http2.noDialH2RoundTripper.RoundTrip',
              'golang.org/x/net/http2.noDialClientConnPool.GetClientConn',
              'github.com/grafana/pyroscope/pkg/objstore.(*PrefixedBucket).Iter',
              'github.com/thanos-io/objstore.TracingBucket.Iter',
              'github.com/thanos-io/objstore.TracingBucket.Iter.func1',
              'github.com/thanos-io/objstore.(*metricBucket).Iter',
              'github.com/thanos-io/objstore/providers/gcs.(*Bucket).Iter',
              'cloud.google.com/go/storage.(*ObjectIterator).Next',
              'google.golang.org/api/iterator.(*PageInfo).next',
              'google.golang.org/api/iterator.(*PageInfo).fill',
              'cloud.google.com/go/storage.(*httpStorageClient).ListObjects.func1',
              'cloud.google.com/go/internal.Retry',
              'cloud.google.com/go/storage.(*httpStorageClient).ListObjects.func1.1',
              'google.golang.org/api/storage/v1.(*ObjectsListCall).Do',
              'google.golang.org/api/storage/v1.(*ObjectsListCall).doRequest',
              'google.golang.org/api/internal/gensupport.SendRequest',
              'google.golang.org/api/internal/gensupport.send',
              'net/http.(*Transport).getConn',
              'github.com/grafana/pyroscope/pkg/phlaredb.(*Head).loop',
              'github.com/grafana/pyroscope/pkg/phlaredb.(*PhlareDB).loop',
              'github.com/grafana/pyroscope/pkg/phlaredb.(*PhlareDB).runBlockQuerierSync',
              'github.com/grafana/pyroscope/pkg/phlaredb.(*BlockQuerier).Sync',
              'github.com/grafana/pyroscope/pkg/phlaredb/block.IterBlockMetas.func1',
              'cloud.google.com/go/storage.(*ObjectHandle).NewReader',
              'github.com/grafana/pyroscope/pkg/phlaredb/symdb.(*SymDB).updateStats',
              'github.com/grafana/pyroscope/pkg/querier/worker.(*processorManager).concurrency.func1',
              'github.com/grafana/pyroscope/pkg/querier/worker.(*schedulerProcessor).processQueriesOnSingleStream',
              'github.com/grafana/pyroscope/pkg/querier/worker.(*schedulerProcessor).processQueriesOnSingleStream.func1',
              'github.com/grafana/pyroscope/pkg/querier/worker.(*schedulerProcessor).querierLoop',
              'github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.(*schedulerForQuerierQuerierLoopClient).Recv',
              'github.com/grafana/pyroscope/pkg/querier/worker.(*schedulerProcessor).querierLoop.func1',
              'github.com/grafana/pyroscope/pkg/scheduler/queue.contextCond.Wait.func1',
              'github.com/grafana/pyroscope/pkg/scheduler/queue.contextCond.Wait.func2',
              'github.com/grafana/pyroscope/pkg/storegateway.(*BucketStore).SyncBlocks.func1',
              'github.com/grafana/pyroscope/pkg/storegateway.(*BucketStores).syncUsersBlocks.func2',
              'github.com/grafana/pyroscope/pkg/storegateway.(*BucketStores).SyncBlocks.func1',
              'github.com/grafana/pyroscope/pkg/storegateway.(*BucketStore).SyncBlocks',
              'github.com/grafana/pyroscope/pkg/storegateway.(*BucketStore).fetchBlocksMeta',
              'github.com/grafana/pyroscope/pkg/phlaredb/block.IterBlockMetas',
              'github.com/grafana/pyroscope/pkg/phlaredb/block.listAllBlockByPrefixes',
              'github.com/hashicorp/memberlist.(*Memberlist).packetHandler',
              'github.com/hashicorp/memberlist.(*Memberlist).packetListen',
              'github.com/hashicorp/memberlist.(*Memberlist).ingestPacket',
              'github.com/hashicorp/memberlist.(*Memberlist).handleCommand',
              'github.com/hashicorp/memberlist.(*Memberlist).handleCompound',
              'github.com/hashicorp/memberlist.(*Memberlist).handlePing',
              'github.com/hashicorp/memberlist.(*Memberlist).encodeAndSendMsg',
              'github.com/hashicorp/memberlist.(*Memberlist).sendMsg',
              'github.com/hashicorp/memberlist.(*Memberlist).rawSendMsgPacket',
              'github.com/hashicorp/memberlist.(*labelWrappedTransport).WriteToAddress',
              'github.com/hashicorp/memberlist.(*shimNodeAwareTransport).WriteToAddress',
              'github.com/grafana/dskit/kv/memberlist.(*TCPTransport).WriteTo',
              'github.com/grafana/dskit/kv/memberlist.(*TCPTransport).writeTo',
              'github.com/grafana/dskit/kv/memberlist.(*TCPTransport).getConnection',
              'net.(*Dialer).Dial',
              'net.(*Dialer).DialContext',
              'net.(*sysDialer).dialParallel',
              'net.(*sysDialer).dialSerial',
              'net.(*sysDialer).dialSingle',
              'net.(*sysDialer).dialTCP',
              'net.(*sysDialer).doDialTCP',
              'net.internetSocket',
              'net.socket',
              'net.(*netFD).dial',
              'net.(*netFD).connect',
              'net.(*netFD).connect.func1',
              'net.DialTimeout',
              'github.com/hashicorp/memberlist.(*Memberlist).handleCompressed',
              'github.com/hashicorp/memberlist.(*Memberlist).pushPullTrigger',
              'github.com/hashicorp/memberlist.(*Memberlist).pushPull',
              'github.com/hashicorp/memberlist.(*Memberlist).pushPullNode',
              'github.com/hashicorp/memberlist.(*Memberlist).sendAndReceiveState',
              'github.com/hashicorp/memberlist.(*labelWrappedTransport).DialAddressTimeout',
              'github.com/hashicorp/memberlist.(*shimNodeAwareTransport).DialAddressTimeout',
              'github.com/grafana/dskit/kv/memberlist.(*TCPTransport).DialTimeout',
              'github.com/hashicorp/memberlist.(*Memberlist).streamListen',
              'github.com/hashicorp/memberlist.(*Memberlist).triggerFunc',
              'github.com/hashicorp/memberlist.(*Memberlist).gossip',
              'github.com/hashicorp/memberlist.(*Memberlist).probe',
              'github.com/hashicorp/memberlist.(*Memberlist).probeNode',
              'github.com/prometheus/client_golang/prometheus.(*Registry).Gather.func1',
              'github.com/grafana/backend-enterprise/pkg/enterprise/mimir/instrumentation/node.(*MultiCollector).Collect',
              'github.com/prometheus/client_golang/prometheus.(*wrappingCollector).Collect',
              'github.com/prometheus/client_golang/prometheus.(*Registry).Gather.func2',
              'github.com/prometheus/client_golang/prometheus.(*wrappingCollector).Collect.func1',
              'github.com/prometheus/client_golang/prometheus.(*MetricVec).Collect',
              'github.com/prometheus/client_golang/prometheus.(*metricMap).Collect',
              'github.com/samber/lo.Async[...].func1',
              'github.com/segmentio/kafka-go.(*Reader).ReadLag.func1',
              'github.com/segmentio/kafka-go.(*Dialer).DialLeader',
              'github.com/segmentio/kafka-go.(*Dialer).DialContext',
              'github.com/segmentio/kafka-go.(*Dialer).connect',
              'github.com/segmentio/kafka-go.(*Dialer).dialContext',
              'github.com/segmentio/kafka-go.(*Dialer).DialPartition',
              'github.com/segmentio/kafka-go.(*Dialer).LookupPartition',
              'github.com/segmentio/kafka-go.(*Reader).readLag',
              'github.com/segmentio/kafka-go.(*Reader).start.func1',
              'github.com/segmentio/kafka-go.(*reader).run',
              'github.com/segmentio/kafka-go.(*reader).initialize',
              'github.com/segmentio/kafka-go.(*reader).read',
              'github.com/segmentio/kafka-go.(*reader).sendMessage',
              'github.com/segmentio/kafka-go.(*Writer).spawn.func1',
              'github.com/segmentio/kafka-go.(*partitionWriter).newWriteBatch.func1',
              'github.com/segmentio/kafka-go.(*partitionWriter).awaitBatch',
              'github.com/segmentio/kafka-go.(*partitionWriter).writeBatches',
              'github.com/segmentio/kafka-go.(*batchQueue).Get',
              'github.com/segmentio/kafka-go.(*partitionWriter).writeBatch',
              'github.com/segmentio/kafka-go.(*Writer).produce',
              'github.com/segmentio/kafka-go.(*Client).Produce',
              'github.com/segmentio/kafka-go.(*Client).roundTrip',
              'github.com/segmentio/kafka-go.(*Transport).RoundTrip',
              'github.com/segmentio/kafka-go.(*connPool).roundTrip',
              'github.com/segmentio/kafka-go.async.await',
              'github.com/segmentio/kafka-go.(*conn).run',
              'github.com/segmentio/kafka-go.(*connPool).discover',
              'github.com/segmentio/parquet-go.readPages',
              'github.com/segmentio/parquet-go.(*filePages).ReadPage',
              'github.com/segmentio/encoding/thrift.(*Decoder).Decode',
              'github.com/segmentio/encoding/thrift.(*structDecoder).decode',
              'github.com/segmentio/encoding/thrift.readStruct',
              'github.com/segmentio/encoding/thrift.(*compactReader).ReadField',
              'github.com/segmentio/encoding/thrift.(*binaryReader).ReadByte',
              'bufio.(*Reader).ReadByte',
              'bufio.(*Reader).fill',
              'io.(*SectionReader).Read',
              'github.com/segmentio/parquet-go.(*File).ReadAt',
              'github.com/grafana/pyroscope/pkg/objstore/parquet.(*optimizedReaderAt).ReadAt',
              'github.com/grafana/pyroscope/pkg/objstore.(*ReaderAt).ReadAt',
              'github.com/thanos-io/objstore.(*tracingReadCloser).Read',
              'github.com/thanos-io/objstore.(*timingReadCloser).Read',
              'cloud.google.com/go/storage.(*Reader).Read',
              'cloud.google.com/go/storage.(*httpReader).Read',
              'go.opencensus.io/plugin/ochttp.(*tracker).Read',
              'go.opencensus.io/plugin/ochttp.(*bodyTracker).Read',
              'github.com/segmentio/encoding/thrift.(*compactReader).ReadByte',
              'github.com/segmentio/parquet-go.(*filePages).readPage',
              'bufio.(*Reader).Read',
              'github.com/uber/jaeger-client-go.(*RemotelyControlledSampler).pollController',
              'github.com/uber/jaeger-client-go.(*RemotelyControlledSampler).pollControllerWithTicker',
              'github.com/uber/jaeger-client-go.(*RemotelyControlledSampler).UpdateSampler',
              'github.com/uber/jaeger-client-go.(*httpSamplingStrategyFetcher).Fetch',
              'io.ReadAll',
              'net/http.(*bodyEOFSignal).condfn',
              'net/http.(*persistConn).readLoop.func4',
              'net/http.(*Client).Get',
              'net/http.(*persistConn).roundTrip',
              'github.com/uber/jaeger-client-go.(*remoteReporter).processQueue',
              'github.com/uber/jaeger-client-go/utils.(*reconnectingUDPConn).reconnectLoop',
              'github.com/uber/jaeger-client-go/utils.(*reconnectingUDPConn).attemptResolveAndDial',
              'net.ResolveUDPAddr',
              'net.(*Resolver).internetAddrList',
              'net.(*Resolver).lookupIPAddr',
              'go.etcd.io/etcd/client/v3.(*watchGrpcStream).run',
              'go.etcd.io/etcd/client/v3.(*watchGrpcStream).serveSubstream',
              'go.etcd.io/etcd/client/v3.(*watchGrpcStream).serveWatchClient',
              'go.etcd.io/etcd/api/v3/etcdserverpb.(*watchWatchClient).Recv',
              'go.opencensus.io/stats/view.(*worker).start',
              'golang.org/x/net/http2.(*ClientConn).healthCheck',
              'golang.org/x/net/http2.(*ClientConn).Ping',
              'golang.org/x/net/http2.(*ClientConn).readLoop',
              'golang.org/x/net/http2.(*clientConnReadLoop).run',
              'golang.org/x/net/http2.(*clientConnReadLoop).processData',
              'golang.org/x/net/http2.(*pipe).Write',
              'golang.org/x/net/http2.(*clientConnReadLoop).processPing',
              'golang.org/x/net/http2.(*clientStream).doRequest',
              'golang.org/x/net/http2.(*clientStream).cleanupWriteRequest',
              'golang.org/x/net/http2.(*clientStream).writeRequest',
              'golang.org/x/net/http2.(*clientStream).encodeAndWriteHeaders',
              'golang.org/x/net/http2.(*clientStream).writeRequestBody',
              'golang.org/x/net/http2.(*clientStream).awaitFlowControl',
              'net/http.(*readTrackingBody).Read',
              'google.golang.org/api/internal/gensupport.(*multipartReader).Read',
              'sync.(*Pool).Get',
              'golang.org/x/net/http2.(*serverConn).readFrames',
              'golang.org/x/net/http2.(*serverConn).runHandler',
              'golang.org/x/net/http2.(*serverConn).runHandler.func1',
              'golang.org/x/net/http2.(*responseWriter).handlerDone',
              'golang.org/x/net/http2.(*responseWriter).Flush',
              'golang.org/x/net/http2.(*responseWriter).FlushError',
              'bufio.(*Writer).Flush',
              'golang.org/x/net/http2.chunkWriter.Write',
              'golang.org/x/net/http2.(*responseWriterState).writeChunk',
              'golang.org/x/net/http2.(*serverConn).writeDataFromHandler',
              'golang.org/x/net/http2.(*serverConn).writeHeaders',
              'net/http.HandlerFunc.ServeHTTP',
              'github.com/opentracing-contrib/go-stdlib/nethttp.MiddlewareFunc.func5',
              'github.com/grafana/pyroscope/pkg/util.Log.Wrap.func1',
              'github.com/weaveworks/common/logging.gokit.Debugf',
              'github.com/felixge/httpsnoop.CaptureMetricsFn',
              'github.com/felixge/httpsnoop.(*Metrics).CaptureMetrics',
              'github.com/weaveworks/common/middleware.Instrument.Wrap.func1.2',
              'github.com/gorilla/mux.(*Router).ServeHTTP',
              'github.com/bufbuild/connect-go.(*Handler).ServeHTTP',
              'github.com/bufbuild/connect-go.NewBidiStreamHandler[...].func1',
              'github.com/grafana/pyroscope/pkg/scheduler.(*Scheduler).FrontendLoop',
              'github.com/bufbuild/connect-go.(*BidiStream[...]).Receive',
              'github.com/bufbuild/connect-go.(*errorTranslatingHandlerConnCloser).Receive',
              'github.com/bufbuild/connect-go.(*grpcHandlerConn).Receive',
              'github.com/bufbuild/connect-go.(*grpcUnmarshaler).Unmarshal',
              'github.com/bufbuild/connect-go.(*envelopeReader).Unmarshal',
              'github.com/bufbuild/connect-go.(*envelopeReader).Read',
              'github.com/weaveworks/common/middleware.(*reqBody).Read',
              'golang.org/x/net/http2.(*requestBody).Read',
              'github.com/bufbuild/connect-go.(*BidiStream[...]).Send',
              'github.com/bufbuild/connect-go.(*errorTranslatingHandlerConnCloser).Send',
              'github.com/bufbuild/connect-go.(*grpcHandlerConn).Send',
              'github.com/bufbuild/connect-go.flushResponseWriter',
              'github.com/felixge/httpsnoop.(*rw).Flush',
              'github.com/grafana/pyroscope/pkg/scheduler.(*Scheduler).frontendConnected',
              'io.CopyN',
              'io.(*LimitedReader).Read',
              'golang.org/x/net/http2.(*serverConn).noteBodyReadFromHandler',
              'github.com/grafana/pyroscope/pkg/scheduler.(*Scheduler).QuerierLoop',
              'github.com/grafana/pyroscope/pkg/scheduler.(*BidiStreamCloser[...]).Receive',
              'github.com/grafana/pyroscope/pkg/scheduler/queue.(*RequestQueue).GetNextRequestForQuerier',
              'github.com/grafana/pyroscope/pkg/scheduler/queue.contextCond.Wait',
              'github.com/grafana/pyroscope/pkg/scheduler/queue.(*RequestQueue).RegisterQuerierConnection',
              'github.com/grafana/pyroscope/pkg/scheduler/queue.(*RequestQueue).UnregisterQuerierConnection',
              'github.com/bufbuild/connect-go.NewUnaryHandler[...].func2',
              'github.com/bufbuild/connect-go.(*connectUnaryHandlerConn).Receive',
              'github.com/bufbuild/connect-go.NewUnaryHandler[...].func1',
              'github.com/grafana/pyroscope/pkg/distributor.(*Distributor).Push',
              'github.com/grafana/pyroscope/pkg/ingester.(*Ingester).Push',
              'github.com/grafana/pyroscope/pkg/ingester.forInstanceUnary[...]',
              'github.com/grafana/pyroscope/pkg/ingester.(*Ingester).forInstance',
              'github.com/grafana/pyroscope/pkg/ingester.forInstanceUnary[...].func1',
              'github.com/grafana/pyroscope/pkg/ingester.(*Ingester).Push.func1',
              'github.com/grafana/pyroscope/pkg/pprof.FromBytes',
              'github.com/grafana/pyroscope/pkg/ingester.(*Ingester).Push.func1.1',
              'github.com/grafana/pyroscope/pkg/phlaredb.(*PhlareDB).Ingest',
              'github.com/grafana/pyroscope/pkg/phlaredb.(*PhlareDB).withHeadForIngest',
              'github.com/grafana/pyroscope/pkg/phlaredb.(*PhlareDB).Ingest.func1',
              'github.com/grafana/pyroscope/pkg/phlaredb.(*Head).Ingest',
              'github.com/grafana/pyroscope/pkg/phlaredb.(*deduplicatingSlice[...]).ingest',
              'sync.(*RWMutex).Lock',
              'github.com/grafana/pyroscope/pkg/phlaredb.(*profileStore).ingest',
              'net/http.(*ServeMux).ServeHTTP',
              'github.com/grafana/pyroscope/pkg/util/gziphandler.GzipHandlerWithOpts.func1.1',
              'github.com/grafana/pyroscope/pkg/util.AuthenticateUser.func1.1',
              'github.com/grafana/pyroscope/pkg/ingester/pyroscope.ingestHandler.ServeHTTP',
              'github.com/grafana/pyroscope/pkg/ingester/pyroscope.ingestHandler.ingestInputFromRequest',
              'github.com/grafana/pyroscope/pkg/ingester/pyroscope.copyBody',
              'github.com/weaveworks/common/middleware.Instrument.Wrap.func1',
              'golang.org/x/sync/errgroup.(*Group).Go.func1',
              'github.com/grafana/dskit/concurrency.ForEachJob.func1',
              'context.(*cancelCtx).Err',
              'github.com/grafana/dskit/ring/client.(*Pool).cleanUnhealthy.func1',
              'github.com/grafana/dskit/ring/client.healthCheck',
              'google.golang.org/grpc/health/grpc_health_v1.(*healthClient).Check',
              'github.com/grafana/pyroscope/pkg/phlaredb/block.Read',
              'encoding/json.(*Decoder).Decode',
              'encoding/json.(*Decoder).readValue',
              'encoding/json.(*Decoder).refill',
              'github.com/grafana/pyroscope/pkg/phlaredb/block.exhaustCloseWithErrCapture',
              'github.com/grafana/dskit/runutil.CloseWithErrCapture',
              'github.com/thanos-io/objstore.(*tracingReadCloser).Close',
              'github.com/thanos-io/objstore.(*timingReadCloser).Close',
              'cloud.google.com/go/storage.(*Reader).Close',
              'cloud.google.com/go/storage.(*httpReader).Close',
              'go.opencensus.io/plugin/ochttp.(*tracker).Close',
              'go.opencensus.io/plugin/ochttp.(*bodyTracker).Close',
              'io.discard.ReadFrom',
              'github.com/grafana/pyroscope/pkg/phlaredb/block.listAllBlockByPrefixes.func1',
              'google.golang.org/api/googleapi.CloseBody',
              'google.golang.org/api/internal/gensupport.DecodeResponse',
              'github.com/grafana/pyroscope/pkg/util.RecoverPanic.func1',
              'github.com/grafana/pyroscope/pkg/phlaredb.MergeProfilesStacktraces.func1',
              'github.com/grafana/pyroscope/pkg/phlaredb.(*headOnDiskQuerier).MergeByStacktraces',
              'github.com/grafana/pyroscope/pkg/phlaredb.mergeByStacktraces',
              'github.com/grafana/pyroscope/pkg/phlaredb/query.(*multiRepeatedPageIterator[...]).Next',
              'google.golang.org/api/internal/gensupport.newMultipartReader.func1',
              'bytes.(*Reader).WriteTo',
              'mime/multipart.(*part).Write',
              'google.golang.org/grpc.newClientStreamWithParams.func4',
              'google.golang.org/grpc/internal/transport.(*http2Client).keepalive',
              'google.golang.org/grpc/internal/transport.(*http2Client).reader',
              'google.golang.org/grpc/internal/transport.(*http2Client).handleData',
              'google.golang.org/grpc/internal/transport.(*http2Client).handlePing',
              'google.golang.org/grpc/internal/transport.(*http2Client).handleWindowUpdate',
              'google.golang.org/grpc/internal/transport.(*http2Client).operateHeaders',
              'google.golang.org/grpc/internal/transport.(*http2Client).getStream',
              'google.golang.org/grpc/internal/transport.newHTTP2Client.func6',
              'google.golang.org/grpc/internal/transport.(*loopyWriter).run',
              'google.golang.org/grpc/internal/transport.(*controlBuffer).get',
              'google.golang.org/grpc/internal/transport.(*loopyWriter).handle',
              'google.golang.org/grpc/internal/transport.(*loopyWriter).cleanupStreamHandler',
              'google.golang.org/grpc/internal/transport.(*http2Client).closeStream.func1',
              'internal/singleflight.(*Group).doCall',
              'net.(*Resolver).lookupIPAddr.func1',
              'net.glob..func1',
              'net.(*Resolver).lookupIP',
              'net.(*Resolver).goLookupIPCNAMEOrder',
              'net.(*Resolver).goLookupIPCNAMEOrder.func4',
              'net.(*netFD).connect.func2',
              'net/http.(*Transport).dialConnFor',
              'net/http.(*Transport).dialConn',
              'golang.org/x/net/http2.configureTransports.func1',
              'golang.org/x/net/http2.(*clientConnPool).addConnIfNeeded',
              'net/http.(*Transport).dial',
              'net.(*Resolver).resolveAddrList',
              'net/http.(*persistConn).addTLS',
              'net/http.(*conn).serve',
              'net/http.(*response).finishRequest',
              'net/http.(*connReader).abortPendingRead',
              'net/http.serverHandler.ServeHTTP',
              'github.com/grafana/pyroscope/pkg/util.glob..func2.1',
              'golang.org/x/net/http2/h2c.h2cHandler.ServeHTTP',
              'golang.org/x/net/http2.(*Server).ServeConn',
              'golang.org/x/net/http2.(*serverConn).serve',
              'golang.org/x/net/http2.(*serverConn).processFrameFromReader',
              'golang.org/x/net/http2.(*serverConn).processFrame',
              'golang.org/x/net/http2.(*serverConn).processData',
              'golang.org/x/net/http2.(*stream).endStream',
              'golang.org/x/net/http2.(*pipe).closeWithError',
              'golang.org/x/net/http2.(*pipe).closeWithErrorAndCode',
              'golang.org/x/net/http2.gate.Done',
              'net/http/pprof.Profile',
              'net/http/pprof.sleep',
              'runtime/pprof.StopCPUProfile',
              'github.com/weaveworks/common/middleware.Log.Wrap.func1',
              'github.com/grafana/mimir/pkg/util/gziphandler.GzipHandlerWithOpts.func1.1',
              'github.com/grafana/backend-enterprise/pkg/aggregator.(*Aggregator).readyHandler',
              'github.com/grafana/backend-enterprise/pkg/aggregator.(*Aggregator).ready',
              'github.com/grafana/backend-enterprise/pkg/aggregator.(*worker).highestLagSec',
              'net/http.(*persistConn).addTLS.func2',
              'crypto/tls.(*Conn).HandshakeContext',
              'crypto/tls.(*Conn).handshakeContext',
              'crypto/tls.(*Conn).handshakeContext.func1',
              'net/http.(*persistConn).closeConnIfStillIdle',
              'net/http.(*persistConn).readLoop',
              'net/http.(*persistConn).writeLoop',
            ],
          },
        },
      },
    },
  ],
};
